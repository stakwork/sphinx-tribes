// Code generated by mockery v2.39.1. DO NOT EDIT.

package db

import (
	http "net/http"

	db "github.com/stakwork/sphinx-tribes/db"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

type Database_Expecter struct {
	mock *mock.Mock
}

func (_m *Database) EXPECT() *Database_Expecter {
	return &Database_Expecter{mock: &_m.Mock}
}

// AddAndUpdateBudget provides a mock function with given fields: invoice
func (_m *Database) AddAndUpdateBudget(invoice db.InvoiceList) db.PaymentHistory {
	ret := _m.Called(invoice)

	if len(ret) == 0 {
		panic("no return value specified for AddAndUpdateBudget")
	}

	var r0 db.PaymentHistory
	if rf, ok := ret.Get(0).(func(db.InvoiceList) db.PaymentHistory); ok {
		r0 = rf(invoice)
	} else {
		r0 = ret.Get(0).(db.PaymentHistory)
	}

	return r0
}

// Database_AddAndUpdateBudget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAndUpdateBudget'
type Database_AddAndUpdateBudget_Call struct {
	*mock.Call
}

// AddAndUpdateBudget is a helper method to define mock.On call
//   - invoice db.InvoiceList
func (_e *Database_Expecter) AddAndUpdateBudget(invoice interface{}) *Database_AddAndUpdateBudget_Call {
	return &Database_AddAndUpdateBudget_Call{Call: _e.mock.On("AddAndUpdateBudget", invoice)}
}

func (_c *Database_AddAndUpdateBudget_Call) Run(run func(invoice db.InvoiceList)) *Database_AddAndUpdateBudget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.InvoiceList))
	})
	return _c
}

func (_c *Database_AddAndUpdateBudget_Call) Return(_a0 db.PaymentHistory) *Database_AddAndUpdateBudget_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_AddAndUpdateBudget_Call) RunAndReturn(run func(db.InvoiceList) db.PaymentHistory) *Database_AddAndUpdateBudget_Call {
	_c.Call.Return(run)
	return _c
}

// AddBounty provides a mock function with given fields: b
func (_m *Database) AddBounty(b db.Bounty) (db.Bounty, error) {
	ret := _m.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for AddBounty")
	}

	var r0 db.Bounty
	var r1 error
	if rf, ok := ret.Get(0).(func(db.Bounty) (db.Bounty, error)); ok {
		return rf(b)
	}
	if rf, ok := ret.Get(0).(func(db.Bounty) db.Bounty); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(db.Bounty)
	}

	if rf, ok := ret.Get(1).(func(db.Bounty) error); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_AddBounty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBounty'
type Database_AddBounty_Call struct {
	*mock.Call
}

// AddBounty is a helper method to define mock.On call
//   - b db.Bounty
func (_e *Database_Expecter) AddBounty(b interface{}) *Database_AddBounty_Call {
	return &Database_AddBounty_Call{Call: _e.mock.On("AddBounty", b)}
}

func (_c *Database_AddBounty_Call) Run(run func(b db.Bounty)) *Database_AddBounty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.Bounty))
	})
	return _c
}

func (_c *Database_AddBounty_Call) Return(_a0 db.Bounty, _a1 error) *Database_AddBounty_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_AddBounty_Call) RunAndReturn(run func(db.Bounty) (db.Bounty, error)) *Database_AddBounty_Call {
	_c.Call.Return(run)
	return _c
}

// AddBudgetHistory provides a mock function with given fields: budget
func (_m *Database) AddBudgetHistory(budget db.BudgetHistory) db.BudgetHistory {
	ret := _m.Called(budget)

	if len(ret) == 0 {
		panic("no return value specified for AddBudgetHistory")
	}

	var r0 db.BudgetHistory
	if rf, ok := ret.Get(0).(func(db.BudgetHistory) db.BudgetHistory); ok {
		r0 = rf(budget)
	} else {
		r0 = ret.Get(0).(db.BudgetHistory)
	}

	return r0
}

// Database_AddBudgetHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBudgetHistory'
type Database_AddBudgetHistory_Call struct {
	*mock.Call
}

// AddBudgetHistory is a helper method to define mock.On call
//   - budget db.BudgetHistory
func (_e *Database_Expecter) AddBudgetHistory(budget interface{}) *Database_AddBudgetHistory_Call {
	return &Database_AddBudgetHistory_Call{Call: _e.mock.On("AddBudgetHistory", budget)}
}

func (_c *Database_AddBudgetHistory_Call) Run(run func(budget db.BudgetHistory)) *Database_AddBudgetHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.BudgetHistory))
	})
	return _c
}

func (_c *Database_AddBudgetHistory_Call) Return(_a0 db.BudgetHistory) *Database_AddBudgetHistory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_AddBudgetHistory_Call) RunAndReturn(run func(db.BudgetHistory) db.BudgetHistory) *Database_AddBudgetHistory_Call {
	_c.Call.Return(run)
	return _c
}

// AddInvoice provides a mock function with given fields: invoice
func (_m *Database) AddInvoice(invoice db.InvoiceList) db.InvoiceList {
	ret := _m.Called(invoice)

	if len(ret) == 0 {
		panic("no return value specified for AddInvoice")
	}

	var r0 db.InvoiceList
	if rf, ok := ret.Get(0).(func(db.InvoiceList) db.InvoiceList); ok {
		r0 = rf(invoice)
	} else {
		r0 = ret.Get(0).(db.InvoiceList)
	}

	return r0
}

// Database_AddInvoice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddInvoice'
type Database_AddInvoice_Call struct {
	*mock.Call
}

// AddInvoice is a helper method to define mock.On call
//   - invoice db.InvoiceList
func (_e *Database_Expecter) AddInvoice(invoice interface{}) *Database_AddInvoice_Call {
	return &Database_AddInvoice_Call{Call: _e.mock.On("AddInvoice", invoice)}
}

func (_c *Database_AddInvoice_Call) Run(run func(invoice db.InvoiceList)) *Database_AddInvoice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.InvoiceList))
	})
	return _c
}

func (_c *Database_AddInvoice_Call) Return(_a0 db.InvoiceList) *Database_AddInvoice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_AddInvoice_Call) RunAndReturn(run func(db.InvoiceList) db.InvoiceList) *Database_AddInvoice_Call {
	_c.Call.Return(run)
	return _c
}

// AddPaymentHistory provides a mock function with given fields: payment
func (_m *Database) AddPaymentHistory(payment db.PaymentHistory) db.PaymentHistory {
	ret := _m.Called(payment)

	if len(ret) == 0 {
		panic("no return value specified for AddPaymentHistory")
	}

	var r0 db.PaymentHistory
	if rf, ok := ret.Get(0).(func(db.PaymentHistory) db.PaymentHistory); ok {
		r0 = rf(payment)
	} else {
		r0 = ret.Get(0).(db.PaymentHistory)
	}

	return r0
}

// Database_AddPaymentHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPaymentHistory'
type Database_AddPaymentHistory_Call struct {
	*mock.Call
}

// AddPaymentHistory is a helper method to define mock.On call
//   - payment db.PaymentHistory
func (_e *Database_Expecter) AddPaymentHistory(payment interface{}) *Database_AddPaymentHistory_Call {
	return &Database_AddPaymentHistory_Call{Call: _e.mock.On("AddPaymentHistory", payment)}
}

func (_c *Database_AddPaymentHistory_Call) Run(run func(payment db.PaymentHistory)) *Database_AddPaymentHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.PaymentHistory))
	})
	return _c
}

func (_c *Database_AddPaymentHistory_Call) Return(_a0 db.PaymentHistory) *Database_AddPaymentHistory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_AddPaymentHistory_Call) RunAndReturn(run func(db.PaymentHistory) db.PaymentHistory) *Database_AddPaymentHistory_Call {
	_c.Call.Return(run)
	return _c
}

// AddUserInvoiceData provides a mock function with given fields: userData
func (_m *Database) AddUserInvoiceData(userData db.UserInvoiceData) db.UserInvoiceData {
	ret := _m.Called(userData)

	if len(ret) == 0 {
		panic("no return value specified for AddUserInvoiceData")
	}

	var r0 db.UserInvoiceData
	if rf, ok := ret.Get(0).(func(db.UserInvoiceData) db.UserInvoiceData); ok {
		r0 = rf(userData)
	} else {
		r0 = ret.Get(0).(db.UserInvoiceData)
	}

	return r0
}

// Database_AddUserInvoiceData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserInvoiceData'
type Database_AddUserInvoiceData_Call struct {
	*mock.Call
}

// AddUserInvoiceData is a helper method to define mock.On call
//   - userData db.UserInvoiceData
func (_e *Database_Expecter) AddUserInvoiceData(userData interface{}) *Database_AddUserInvoiceData_Call {
	return &Database_AddUserInvoiceData_Call{Call: _e.mock.On("AddUserInvoiceData", userData)}
}

func (_c *Database_AddUserInvoiceData_Call) Run(run func(userData db.UserInvoiceData)) *Database_AddUserInvoiceData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.UserInvoiceData))
	})
	return _c
}

func (_c *Database_AddUserInvoiceData_Call) Return(_a0 db.UserInvoiceData) *Database_AddUserInvoiceData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_AddUserInvoiceData_Call) RunAndReturn(run func(db.UserInvoiceData) db.UserInvoiceData) *Database_AddUserInvoiceData_Call {
	_c.Call.Return(run)
	return _c
}

// AverageCompletedTime provides a mock function with given fields: r
func (_m *Database) AverageCompletedTime(r db.PaymentDateRange) uint {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AverageCompletedTime")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func(db.PaymentDateRange) uint); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// Database_AverageCompletedTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AverageCompletedTime'
type Database_AverageCompletedTime_Call struct {
	*mock.Call
}

// AverageCompletedTime is a helper method to define mock.On call
//   - r db.PaymentDateRange
func (_e *Database_Expecter) AverageCompletedTime(r interface{}) *Database_AverageCompletedTime_Call {
	return &Database_AverageCompletedTime_Call{Call: _e.mock.On("AverageCompletedTime", r)}
}

func (_c *Database_AverageCompletedTime_Call) Run(run func(r db.PaymentDateRange)) *Database_AverageCompletedTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.PaymentDateRange))
	})
	return _c
}

func (_c *Database_AverageCompletedTime_Call) Return(_a0 uint) *Database_AverageCompletedTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_AverageCompletedTime_Call) RunAndReturn(run func(db.PaymentDateRange) uint) *Database_AverageCompletedTime_Call {
	_c.Call.Return(run)
	return _c
}

// AveragePaidTime provides a mock function with given fields: r
func (_m *Database) AveragePaidTime(r db.PaymentDateRange) uint {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AveragePaidTime")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func(db.PaymentDateRange) uint); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// Database_AveragePaidTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AveragePaidTime'
type Database_AveragePaidTime_Call struct {
	*mock.Call
}

// AveragePaidTime is a helper method to define mock.On call
//   - r db.PaymentDateRange
func (_e *Database_Expecter) AveragePaidTime(r interface{}) *Database_AveragePaidTime_Call {
	return &Database_AveragePaidTime_Call{Call: _e.mock.On("AveragePaidTime", r)}
}

func (_c *Database_AveragePaidTime_Call) Run(run func(r db.PaymentDateRange)) *Database_AveragePaidTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.PaymentDateRange))
	})
	return _c
}

func (_c *Database_AveragePaidTime_Call) Return(_a0 uint) *Database_AveragePaidTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_AveragePaidTime_Call) RunAndReturn(run func(db.PaymentDateRange) uint) *Database_AveragePaidTime_Call {
	_c.Call.Return(run)
	return _c
}

// BountiesPaidPercentage provides a mock function with given fields: r
func (_m *Database) BountiesPaidPercentage(r db.PaymentDateRange) uint {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for BountiesPaidPercentage")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func(db.PaymentDateRange) uint); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// Database_BountiesPaidPercentage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BountiesPaidPercentage'
type Database_BountiesPaidPercentage_Call struct {
	*mock.Call
}

// BountiesPaidPercentage is a helper method to define mock.On call
//   - r db.PaymentDateRange
func (_e *Database_Expecter) BountiesPaidPercentage(r interface{}) *Database_BountiesPaidPercentage_Call {
	return &Database_BountiesPaidPercentage_Call{Call: _e.mock.On("BountiesPaidPercentage", r)}
}

func (_c *Database_BountiesPaidPercentage_Call) Run(run func(r db.PaymentDateRange)) *Database_BountiesPaidPercentage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.PaymentDateRange))
	})
	return _c
}

func (_c *Database_BountiesPaidPercentage_Call) Return(_a0 uint) *Database_BountiesPaidPercentage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_BountiesPaidPercentage_Call) RunAndReturn(run func(db.PaymentDateRange) uint) *Database_BountiesPaidPercentage_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeOrganizationDeleteStatus provides a mock function with given fields: org_uuid, status
func (_m *Database) ChangeOrganizationDeleteStatus(org_uuid string, status bool) db.Organization {
	ret := _m.Called(org_uuid, status)

	if len(ret) == 0 {
		panic("no return value specified for ChangeOrganizationDeleteStatus")
	}

	var r0 db.Organization
	if rf, ok := ret.Get(0).(func(string, bool) db.Organization); ok {
		r0 = rf(org_uuid, status)
	} else {
		r0 = ret.Get(0).(db.Organization)
	}

	return r0
}

// Database_ChangeOrganizationDeleteStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeOrganizationDeleteStatus'
type Database_ChangeOrganizationDeleteStatus_Call struct {
	*mock.Call
}

// ChangeOrganizationDeleteStatus is a helper method to define mock.On call
//   - org_uuid string
//   - status bool
func (_e *Database_Expecter) ChangeOrganizationDeleteStatus(org_uuid interface{}, status interface{}) *Database_ChangeOrganizationDeleteStatus_Call {
	return &Database_ChangeOrganizationDeleteStatus_Call{Call: _e.mock.On("ChangeOrganizationDeleteStatus", org_uuid, status)}
}

func (_c *Database_ChangeOrganizationDeleteStatus_Call) Run(run func(org_uuid string, status bool)) *Database_ChangeOrganizationDeleteStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *Database_ChangeOrganizationDeleteStatus_Call) Return(_a0 db.Organization) *Database_ChangeOrganizationDeleteStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_ChangeOrganizationDeleteStatus_Call) RunAndReturn(run func(string, bool) db.Organization) *Database_ChangeOrganizationDeleteStatus_Call {
	_c.Call.Return(run)
	return _c
}

// CountBounties provides a mock function with given fields:
func (_m *Database) CountBounties() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountBounties")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Database_CountBounties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountBounties'
type Database_CountBounties_Call struct {
	*mock.Call
}

// CountBounties is a helper method to define mock.On call
func (_e *Database_Expecter) CountBounties() *Database_CountBounties_Call {
	return &Database_CountBounties_Call{Call: _e.mock.On("CountBounties")}
}

func (_c *Database_CountBounties_Call) Run(run func()) *Database_CountBounties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_CountBounties_Call) Return(_a0 uint64) *Database_CountBounties_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_CountBounties_Call) RunAndReturn(run func() uint64) *Database_CountBounties_Call {
	_c.Call.Return(run)
	return _c
}

// CountDevelopers provides a mock function with given fields:
func (_m *Database) CountDevelopers() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountDevelopers")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_CountDevelopers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountDevelopers'
type Database_CountDevelopers_Call struct {
	*mock.Call
}

// CountDevelopers is a helper method to define mock.On call
func (_e *Database_Expecter) CountDevelopers() *Database_CountDevelopers_Call {
	return &Database_CountDevelopers_Call{Call: _e.mock.On("CountDevelopers")}
}

func (_c *Database_CountDevelopers_Call) Run(run func()) *Database_CountDevelopers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_CountDevelopers_Call) Return(_a0 int64) *Database_CountDevelopers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_CountDevelopers_Call) RunAndReturn(run func() int64) *Database_CountDevelopers_Call {
	_c.Call.Return(run)
	return _c
}

// CreateChannel provides a mock function with given fields: c
func (_m *Database) CreateChannel(c db.Channel) (db.Channel, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannel")
	}

	var r0 db.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(db.Channel) (db.Channel, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(db.Channel) db.Channel); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(db.Channel)
	}

	if rf, ok := ret.Get(1).(func(db.Channel) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_CreateChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChannel'
type Database_CreateChannel_Call struct {
	*mock.Call
}

// CreateChannel is a helper method to define mock.On call
//   - c db.Channel
func (_e *Database_Expecter) CreateChannel(c interface{}) *Database_CreateChannel_Call {
	return &Database_CreateChannel_Call{Call: _e.mock.On("CreateChannel", c)}
}

func (_c *Database_CreateChannel_Call) Run(run func(c db.Channel)) *Database_CreateChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.Channel))
	})
	return _c
}

func (_c *Database_CreateChannel_Call) Return(_a0 db.Channel, _a1 error) *Database_CreateChannel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_CreateChannel_Call) RunAndReturn(run func(db.Channel) (db.Channel, error)) *Database_CreateChannel_Call {
	_c.Call.Return(run)
	return _c
}

// CreateConnectionCode provides a mock function with given fields: c
func (_m *Database) CreateConnectionCode(c db.ConnectionCodes) (db.ConnectionCodes, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for CreateConnectionCode")
	}

	var r0 db.ConnectionCodes
	var r1 error
	if rf, ok := ret.Get(0).(func(db.ConnectionCodes) (db.ConnectionCodes, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(db.ConnectionCodes) db.ConnectionCodes); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(db.ConnectionCodes)
	}

	if rf, ok := ret.Get(1).(func(db.ConnectionCodes) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_CreateConnectionCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateConnectionCode'
type Database_CreateConnectionCode_Call struct {
	*mock.Call
}

// CreateConnectionCode is a helper method to define mock.On call
//   - c db.ConnectionCodes
func (_e *Database_Expecter) CreateConnectionCode(c interface{}) *Database_CreateConnectionCode_Call {
	return &Database_CreateConnectionCode_Call{Call: _e.mock.On("CreateConnectionCode", c)}
}

func (_c *Database_CreateConnectionCode_Call) Run(run func(c db.ConnectionCodes)) *Database_CreateConnectionCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.ConnectionCodes))
	})
	return _c
}

func (_c *Database_CreateConnectionCode_Call) Return(_a0 db.ConnectionCodes, _a1 error) *Database_CreateConnectionCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_CreateConnectionCode_Call) RunAndReturn(run func(db.ConnectionCodes) (db.ConnectionCodes, error)) *Database_CreateConnectionCode_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLeaderBoard provides a mock function with given fields: uuid, leaderboards
func (_m *Database) CreateLeaderBoard(uuid string, leaderboards []db.LeaderBoard) ([]db.LeaderBoard, error) {
	ret := _m.Called(uuid, leaderboards)

	if len(ret) == 0 {
		panic("no return value specified for CreateLeaderBoard")
	}

	var r0 []db.LeaderBoard
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []db.LeaderBoard) ([]db.LeaderBoard, error)); ok {
		return rf(uuid, leaderboards)
	}
	if rf, ok := ret.Get(0).(func(string, []db.LeaderBoard) []db.LeaderBoard); ok {
		r0 = rf(uuid, leaderboards)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.LeaderBoard)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []db.LeaderBoard) error); ok {
		r1 = rf(uuid, leaderboards)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_CreateLeaderBoard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLeaderBoard'
type Database_CreateLeaderBoard_Call struct {
	*mock.Call
}

// CreateLeaderBoard is a helper method to define mock.On call
//   - uuid string
//   - leaderboards []db.LeaderBoard
func (_e *Database_Expecter) CreateLeaderBoard(uuid interface{}, leaderboards interface{}) *Database_CreateLeaderBoard_Call {
	return &Database_CreateLeaderBoard_Call{Call: _e.mock.On("CreateLeaderBoard", uuid, leaderboards)}
}

func (_c *Database_CreateLeaderBoard_Call) Run(run func(uuid string, leaderboards []db.LeaderBoard)) *Database_CreateLeaderBoard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]db.LeaderBoard))
	})
	return _c
}

func (_c *Database_CreateLeaderBoard_Call) Return(_a0 []db.LeaderBoard, _a1 error) *Database_CreateLeaderBoard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_CreateLeaderBoard_Call) RunAndReturn(run func(string, []db.LeaderBoard) ([]db.LeaderBoard, error)) *Database_CreateLeaderBoard_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLnUser provides a mock function with given fields: lnKey
func (_m *Database) CreateLnUser(lnKey string) (db.Person, error) {
	ret := _m.Called(lnKey)

	if len(ret) == 0 {
		panic("no return value specified for CreateLnUser")
	}

	var r0 db.Person
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (db.Person, error)); ok {
		return rf(lnKey)
	}
	if rf, ok := ret.Get(0).(func(string) db.Person); ok {
		r0 = rf(lnKey)
	} else {
		r0 = ret.Get(0).(db.Person)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(lnKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_CreateLnUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLnUser'
type Database_CreateLnUser_Call struct {
	*mock.Call
}

// CreateLnUser is a helper method to define mock.On call
//   - lnKey string
func (_e *Database_Expecter) CreateLnUser(lnKey interface{}) *Database_CreateLnUser_Call {
	return &Database_CreateLnUser_Call{Call: _e.mock.On("CreateLnUser", lnKey)}
}

func (_c *Database_CreateLnUser_Call) Run(run func(lnKey string)) *Database_CreateLnUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_CreateLnUser_Call) Return(_a0 db.Person, _a1 error) *Database_CreateLnUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_CreateLnUser_Call) RunAndReturn(run func(string) (db.Person, error)) *Database_CreateLnUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrEditBot provides a mock function with given fields: b
func (_m *Database) CreateOrEditBot(b db.Bot) (db.Bot, error) {
	ret := _m.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrEditBot")
	}

	var r0 db.Bot
	var r1 error
	if rf, ok := ret.Get(0).(func(db.Bot) (db.Bot, error)); ok {
		return rf(b)
	}
	if rf, ok := ret.Get(0).(func(db.Bot) db.Bot); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(db.Bot)
	}

	if rf, ok := ret.Get(1).(func(db.Bot) error); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_CreateOrEditBot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrEditBot'
type Database_CreateOrEditBot_Call struct {
	*mock.Call
}

// CreateOrEditBot is a helper method to define mock.On call
//   - b db.Bot
func (_e *Database_Expecter) CreateOrEditBot(b interface{}) *Database_CreateOrEditBot_Call {
	return &Database_CreateOrEditBot_Call{Call: _e.mock.On("CreateOrEditBot", b)}
}

func (_c *Database_CreateOrEditBot_Call) Run(run func(b db.Bot)) *Database_CreateOrEditBot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.Bot))
	})
	return _c
}

func (_c *Database_CreateOrEditBot_Call) Return(_a0 db.Bot, _a1 error) *Database_CreateOrEditBot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_CreateOrEditBot_Call) RunAndReturn(run func(db.Bot) (db.Bot, error)) *Database_CreateOrEditBot_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrEditBounty provides a mock function with given fields: b
func (_m *Database) CreateOrEditBounty(b db.Bounty) (db.Bounty, error) {
	ret := _m.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrEditBounty")
	}

	var r0 db.Bounty
	var r1 error
	if rf, ok := ret.Get(0).(func(db.Bounty) (db.Bounty, error)); ok {
		return rf(b)
	}
	if rf, ok := ret.Get(0).(func(db.Bounty) db.Bounty); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(db.Bounty)
	}

	if rf, ok := ret.Get(1).(func(db.Bounty) error); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_CreateOrEditBounty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrEditBounty'
type Database_CreateOrEditBounty_Call struct {
	*mock.Call
}

// CreateOrEditBounty is a helper method to define mock.On call
//   - b db.Bounty
func (_e *Database_Expecter) CreateOrEditBounty(b interface{}) *Database_CreateOrEditBounty_Call {
	return &Database_CreateOrEditBounty_Call{Call: _e.mock.On("CreateOrEditBounty", b)}
}

func (_c *Database_CreateOrEditBounty_Call) Run(run func(b db.Bounty)) *Database_CreateOrEditBounty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.Bounty))
	})
	return _c
}

func (_c *Database_CreateOrEditBounty_Call) Return(_a0 db.Bounty, _a1 error) *Database_CreateOrEditBounty_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_CreateOrEditBounty_Call) RunAndReturn(run func(db.Bounty) (db.Bounty, error)) *Database_CreateOrEditBounty_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrEditOrganization provides a mock function with given fields: m
func (_m *Database) CreateOrEditOrganization(m db.Organization) (db.Organization, error) {
	ret := _m.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrEditOrganization")
	}

	var r0 db.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(db.Organization) (db.Organization, error)); ok {
		return rf(m)
	}
	if rf, ok := ret.Get(0).(func(db.Organization) db.Organization); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Get(0).(db.Organization)
	}

	if rf, ok := ret.Get(1).(func(db.Organization) error); ok {
		r1 = rf(m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_CreateOrEditOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrEditOrganization'
type Database_CreateOrEditOrganization_Call struct {
	*mock.Call
}

// CreateOrEditOrganization is a helper method to define mock.On call
//   - m db.Organization
func (_e *Database_Expecter) CreateOrEditOrganization(m interface{}) *Database_CreateOrEditOrganization_Call {
	return &Database_CreateOrEditOrganization_Call{Call: _e.mock.On("CreateOrEditOrganization", m)}
}

func (_c *Database_CreateOrEditOrganization_Call) Run(run func(m db.Organization)) *Database_CreateOrEditOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.Organization))
	})
	return _c
}

func (_c *Database_CreateOrEditOrganization_Call) Return(_a0 db.Organization, _a1 error) *Database_CreateOrEditOrganization_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_CreateOrEditOrganization_Call) RunAndReturn(run func(db.Organization) (db.Organization, error)) *Database_CreateOrEditOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrEditPerson provides a mock function with given fields: m
func (_m *Database) CreateOrEditPerson(m db.Person) (db.Person, error) {
	ret := _m.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrEditPerson")
	}

	var r0 db.Person
	var r1 error
	if rf, ok := ret.Get(0).(func(db.Person) (db.Person, error)); ok {
		return rf(m)
	}
	if rf, ok := ret.Get(0).(func(db.Person) db.Person); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Get(0).(db.Person)
	}

	if rf, ok := ret.Get(1).(func(db.Person) error); ok {
		r1 = rf(m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_CreateOrEditPerson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrEditPerson'
type Database_CreateOrEditPerson_Call struct {
	*mock.Call
}

// CreateOrEditPerson is a helper method to define mock.On call
//   - m db.Person
func (_e *Database_Expecter) CreateOrEditPerson(m interface{}) *Database_CreateOrEditPerson_Call {
	return &Database_CreateOrEditPerson_Call{Call: _e.mock.On("CreateOrEditPerson", m)}
}

func (_c *Database_CreateOrEditPerson_Call) Run(run func(m db.Person)) *Database_CreateOrEditPerson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.Person))
	})
	return _c
}

func (_c *Database_CreateOrEditPerson_Call) Return(_a0 db.Person, _a1 error) *Database_CreateOrEditPerson_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_CreateOrEditPerson_Call) RunAndReturn(run func(db.Person) (db.Person, error)) *Database_CreateOrEditPerson_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrEditTribe provides a mock function with given fields: m
func (_m *Database) CreateOrEditTribe(m db.Tribe) (db.Tribe, error) {
	ret := _m.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrEditTribe")
	}

	var r0 db.Tribe
	var r1 error
	if rf, ok := ret.Get(0).(func(db.Tribe) (db.Tribe, error)); ok {
		return rf(m)
	}
	if rf, ok := ret.Get(0).(func(db.Tribe) db.Tribe); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Get(0).(db.Tribe)
	}

	if rf, ok := ret.Get(1).(func(db.Tribe) error); ok {
		r1 = rf(m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_CreateOrEditTribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrEditTribe'
type Database_CreateOrEditTribe_Call struct {
	*mock.Call
}

// CreateOrEditTribe is a helper method to define mock.On call
//   - m db.Tribe
func (_e *Database_Expecter) CreateOrEditTribe(m interface{}) *Database_CreateOrEditTribe_Call {
	return &Database_CreateOrEditTribe_Call{Call: _e.mock.On("CreateOrEditTribe", m)}
}

func (_c *Database_CreateOrEditTribe_Call) Run(run func(m db.Tribe)) *Database_CreateOrEditTribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.Tribe))
	})
	return _c
}

func (_c *Database_CreateOrEditTribe_Call) Return(_a0 db.Tribe, _a1 error) *Database_CreateOrEditTribe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_CreateOrEditTribe_Call) RunAndReturn(run func(db.Tribe) (db.Tribe, error)) *Database_CreateOrEditTribe_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrganizationBudget provides a mock function with given fields: budget
func (_m *Database) CreateOrganizationBudget(budget db.BountyBudget) db.BountyBudget {
	ret := _m.Called(budget)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationBudget")
	}

	var r0 db.BountyBudget
	if rf, ok := ret.Get(0).(func(db.BountyBudget) db.BountyBudget); ok {
		r0 = rf(budget)
	} else {
		r0 = ret.Get(0).(db.BountyBudget)
	}

	return r0
}

// Database_CreateOrganizationBudget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganizationBudget'
type Database_CreateOrganizationBudget_Call struct {
	*mock.Call
}

// CreateOrganizationBudget is a helper method to define mock.On call
//   - budget db.BountyBudget
func (_e *Database_Expecter) CreateOrganizationBudget(budget interface{}) *Database_CreateOrganizationBudget_Call {
	return &Database_CreateOrganizationBudget_Call{Call: _e.mock.On("CreateOrganizationBudget", budget)}
}

func (_c *Database_CreateOrganizationBudget_Call) Run(run func(budget db.BountyBudget)) *Database_CreateOrganizationBudget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.BountyBudget))
	})
	return _c
}

func (_c *Database_CreateOrganizationBudget_Call) Return(_a0 db.BountyBudget) *Database_CreateOrganizationBudget_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_CreateOrganizationBudget_Call) RunAndReturn(run func(db.BountyBudget) db.BountyBudget) *Database_CreateOrganizationBudget_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrganizationUser provides a mock function with given fields: orgUser
func (_m *Database) CreateOrganizationUser(orgUser db.OrganizationUsers) db.OrganizationUsers {
	ret := _m.Called(orgUser)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationUser")
	}

	var r0 db.OrganizationUsers
	if rf, ok := ret.Get(0).(func(db.OrganizationUsers) db.OrganizationUsers); ok {
		r0 = rf(orgUser)
	} else {
		r0 = ret.Get(0).(db.OrganizationUsers)
	}

	return r0
}

// Database_CreateOrganizationUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganizationUser'
type Database_CreateOrganizationUser_Call struct {
	*mock.Call
}

// CreateOrganizationUser is a helper method to define mock.On call
//   - orgUser db.OrganizationUsers
func (_e *Database_Expecter) CreateOrganizationUser(orgUser interface{}) *Database_CreateOrganizationUser_Call {
	return &Database_CreateOrganizationUser_Call{Call: _e.mock.On("CreateOrganizationUser", orgUser)}
}

func (_c *Database_CreateOrganizationUser_Call) Run(run func(orgUser db.OrganizationUsers)) *Database_CreateOrganizationUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.OrganizationUsers))
	})
	return _c
}

func (_c *Database_CreateOrganizationUser_Call) Return(_a0 db.OrganizationUsers) *Database_CreateOrganizationUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_CreateOrganizationUser_Call) RunAndReturn(run func(db.OrganizationUsers) db.OrganizationUsers) *Database_CreateOrganizationUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUserRoles provides a mock function with given fields: roles, uuid, pubkey
func (_m *Database) CreateUserRoles(roles []db.UserRoles, uuid string, pubkey string) []db.UserRoles {
	ret := _m.Called(roles, uuid, pubkey)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserRoles")
	}

	var r0 []db.UserRoles
	if rf, ok := ret.Get(0).(func([]db.UserRoles, string, string) []db.UserRoles); ok {
		r0 = rf(roles, uuid, pubkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.UserRoles)
		}
	}

	return r0
}

// Database_CreateUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserRoles'
type Database_CreateUserRoles_Call struct {
	*mock.Call
}

// CreateUserRoles is a helper method to define mock.On call
//   - roles []db.UserRoles
//   - uuid string
//   - pubkey string
func (_e *Database_Expecter) CreateUserRoles(roles interface{}, uuid interface{}, pubkey interface{}) *Database_CreateUserRoles_Call {
	return &Database_CreateUserRoles_Call{Call: _e.mock.On("CreateUserRoles", roles, uuid, pubkey)}
}

func (_c *Database_CreateUserRoles_Call) Run(run func(roles []db.UserRoles, uuid string, pubkey string)) *Database_CreateUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]db.UserRoles), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Database_CreateUserRoles_Call) Return(_a0 []db.UserRoles) *Database_CreateUserRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_CreateUserRoles_Call) RunAndReturn(run func([]db.UserRoles, string, string) []db.UserRoles) *Database_CreateUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBounty provides a mock function with given fields: pubkey, created
func (_m *Database) DeleteBounty(pubkey string, created string) (db.Bounty, error) {
	ret := _m.Called(pubkey, created)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBounty")
	}

	var r0 db.Bounty
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (db.Bounty, error)); ok {
		return rf(pubkey, created)
	}
	if rf, ok := ret.Get(0).(func(string, string) db.Bounty); ok {
		r0 = rf(pubkey, created)
	} else {
		r0 = ret.Get(0).(db.Bounty)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(pubkey, created)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_DeleteBounty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBounty'
type Database_DeleteBounty_Call struct {
	*mock.Call
}

// DeleteBounty is a helper method to define mock.On call
//   - pubkey string
//   - created string
func (_e *Database_Expecter) DeleteBounty(pubkey interface{}, created interface{}) *Database_DeleteBounty_Call {
	return &Database_DeleteBounty_Call{Call: _e.mock.On("DeleteBounty", pubkey, created)}
}

func (_c *Database_DeleteBounty_Call) Run(run func(pubkey string, created string)) *Database_DeleteBounty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Database_DeleteBounty_Call) Return(_a0 db.Bounty, _a1 error) *Database_DeleteBounty_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_DeleteBounty_Call) RunAndReturn(run func(string, string) (db.Bounty, error)) *Database_DeleteBounty_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrganizationUser provides a mock function with given fields: orgUser, org
func (_m *Database) DeleteOrganizationUser(orgUser db.OrganizationUsersData, org string) db.OrganizationUsersData {
	ret := _m.Called(orgUser, org)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganizationUser")
	}

	var r0 db.OrganizationUsersData
	if rf, ok := ret.Get(0).(func(db.OrganizationUsersData, string) db.OrganizationUsersData); ok {
		r0 = rf(orgUser, org)
	} else {
		r0 = ret.Get(0).(db.OrganizationUsersData)
	}

	return r0
}

// Database_DeleteOrganizationUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrganizationUser'
type Database_DeleteOrganizationUser_Call struct {
	*mock.Call
}

// DeleteOrganizationUser is a helper method to define mock.On call
//   - orgUser db.OrganizationUsersData
//   - org string
func (_e *Database_Expecter) DeleteOrganizationUser(orgUser interface{}, org interface{}) *Database_DeleteOrganizationUser_Call {
	return &Database_DeleteOrganizationUser_Call{Call: _e.mock.On("DeleteOrganizationUser", orgUser, org)}
}

func (_c *Database_DeleteOrganizationUser_Call) Run(run func(orgUser db.OrganizationUsersData, org string)) *Database_DeleteOrganizationUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.OrganizationUsersData), args[1].(string))
	})
	return _c
}

func (_c *Database_DeleteOrganizationUser_Call) Return(_a0 db.OrganizationUsersData) *Database_DeleteOrganizationUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_DeleteOrganizationUser_Call) RunAndReturn(run func(db.OrganizationUsersData, string) db.OrganizationUsersData) *Database_DeleteOrganizationUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserInvoiceData provides a mock function with given fields: payment_request
func (_m *Database) DeleteUserInvoiceData(payment_request string) db.UserInvoiceData {
	ret := _m.Called(payment_request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserInvoiceData")
	}

	var r0 db.UserInvoiceData
	if rf, ok := ret.Get(0).(func(string) db.UserInvoiceData); ok {
		r0 = rf(payment_request)
	} else {
		r0 = ret.Get(0).(db.UserInvoiceData)
	}

	return r0
}

// Database_DeleteUserInvoiceData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserInvoiceData'
type Database_DeleteUserInvoiceData_Call struct {
	*mock.Call
}

// DeleteUserInvoiceData is a helper method to define mock.On call
//   - payment_request string
func (_e *Database_Expecter) DeleteUserInvoiceData(payment_request interface{}) *Database_DeleteUserInvoiceData_Call {
	return &Database_DeleteUserInvoiceData_Call{Call: _e.mock.On("DeleteUserInvoiceData", payment_request)}
}

func (_c *Database_DeleteUserInvoiceData_Call) Run(run func(payment_request string)) *Database_DeleteUserInvoiceData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_DeleteUserInvoiceData_Call) Return(_a0 db.UserInvoiceData) *Database_DeleteUserInvoiceData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_DeleteUserInvoiceData_Call) RunAndReturn(run func(string) db.UserInvoiceData) *Database_DeleteUserInvoiceData_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllBounties provides a mock function with given fields: r
func (_m *Database) GetAllBounties(r *http.Request) []db.Bounty {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAllBounties")
	}

	var r0 []db.Bounty
	if rf, ok := ret.Get(0).(func(*http.Request) []db.Bounty); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Bounty)
		}
	}

	return r0
}

// Database_GetAllBounties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllBounties'
type Database_GetAllBounties_Call struct {
	*mock.Call
}

// GetAllBounties is a helper method to define mock.On call
//   - r *http.Request
func (_e *Database_Expecter) GetAllBounties(r interface{}) *Database_GetAllBounties_Call {
	return &Database_GetAllBounties_Call{Call: _e.mock.On("GetAllBounties", r)}
}

func (_c *Database_GetAllBounties_Call) Run(run func(r *http.Request)) *Database_GetAllBounties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *Database_GetAllBounties_Call) Return(_a0 []db.Bounty) *Database_GetAllBounties_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetAllBounties_Call) RunAndReturn(run func(*http.Request) []db.Bounty) *Database_GetAllBounties_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTribes provides a mock function with given fields:
func (_m *Database) GetAllTribes() []db.Tribe {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllTribes")
	}

	var r0 []db.Tribe
	if rf, ok := ret.Get(0).(func() []db.Tribe); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Tribe)
		}
	}

	return r0
}

// Database_GetAllTribes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTribes'
type Database_GetAllTribes_Call struct {
	*mock.Call
}

// GetAllTribes is a helper method to define mock.On call
func (_e *Database_Expecter) GetAllTribes() *Database_GetAllTribes_Call {
	return &Database_GetAllTribes_Call{Call: _e.mock.On("GetAllTribes")}
}

func (_c *Database_GetAllTribes_Call) Run(run func()) *Database_GetAllTribes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_GetAllTribes_Call) Return(_a0 []db.Tribe) *Database_GetAllTribes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetAllTribes_Call) RunAndReturn(run func() []db.Tribe) *Database_GetAllTribes_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTribesByOwner provides a mock function with given fields: pubkey
func (_m *Database) GetAllTribesByOwner(pubkey string) []db.Tribe {
	ret := _m.Called(pubkey)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTribesByOwner")
	}

	var r0 []db.Tribe
	if rf, ok := ret.Get(0).(func(string) []db.Tribe); ok {
		r0 = rf(pubkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Tribe)
		}
	}

	return r0
}

// Database_GetAllTribesByOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTribesByOwner'
type Database_GetAllTribesByOwner_Call struct {
	*mock.Call
}

// GetAllTribesByOwner is a helper method to define mock.On call
//   - pubkey string
func (_e *Database_Expecter) GetAllTribesByOwner(pubkey interface{}) *Database_GetAllTribesByOwner_Call {
	return &Database_GetAllTribesByOwner_Call{Call: _e.mock.On("GetAllTribesByOwner", pubkey)}
}

func (_c *Database_GetAllTribesByOwner_Call) Run(run func(pubkey string)) *Database_GetAllTribesByOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetAllTribesByOwner_Call) Return(_a0 []db.Tribe) *Database_GetAllTribesByOwner_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetAllTribesByOwner_Call) RunAndReturn(run func(string) []db.Tribe) *Database_GetAllTribesByOwner_Call {
	_c.Call.Return(run)
	return _c
}

// GetAssignedBounties provides a mock function with given fields: r
func (_m *Database) GetAssignedBounties(r *http.Request) ([]db.Bounty, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAssignedBounties")
	}

	var r0 []db.Bounty
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) ([]db.Bounty, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) []db.Bounty); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Bounty)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetAssignedBounties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAssignedBounties'
type Database_GetAssignedBounties_Call struct {
	*mock.Call
}

// GetAssignedBounties is a helper method to define mock.On call
//   - r *http.Request
func (_e *Database_Expecter) GetAssignedBounties(r interface{}) *Database_GetAssignedBounties_Call {
	return &Database_GetAssignedBounties_Call{Call: _e.mock.On("GetAssignedBounties", r)}
}

func (_c *Database_GetAssignedBounties_Call) Run(run func(r *http.Request)) *Database_GetAssignedBounties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *Database_GetAssignedBounties_Call) Return(_a0 []db.Bounty, _a1 error) *Database_GetAssignedBounties_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetAssignedBounties_Call) RunAndReturn(run func(*http.Request) ([]db.Bounty, error)) *Database_GetAssignedBounties_Call {
	_c.Call.Return(run)
	return _c
}

// GetBot provides a mock function with given fields: uuid
func (_m *Database) GetBot(uuid string) db.Bot {
	ret := _m.Called(uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetBot")
	}

	var r0 db.Bot
	if rf, ok := ret.Get(0).(func(string) db.Bot); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Get(0).(db.Bot)
	}

	return r0
}

// Database_GetBot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBot'
type Database_GetBot_Call struct {
	*mock.Call
}

// GetBot is a helper method to define mock.On call
//   - uuid string
func (_e *Database_Expecter) GetBot(uuid interface{}) *Database_GetBot_Call {
	return &Database_GetBot_Call{Call: _e.mock.On("GetBot", uuid)}
}

func (_c *Database_GetBot_Call) Run(run func(uuid string)) *Database_GetBot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetBot_Call) Return(_a0 db.Bot) *Database_GetBot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetBot_Call) RunAndReturn(run func(string) db.Bot) *Database_GetBot_Call {
	_c.Call.Return(run)
	return _c
}

// GetBotByUniqueName provides a mock function with given fields: un
func (_m *Database) GetBotByUniqueName(un string) db.Bot {
	ret := _m.Called(un)

	if len(ret) == 0 {
		panic("no return value specified for GetBotByUniqueName")
	}

	var r0 db.Bot
	if rf, ok := ret.Get(0).(func(string) db.Bot); ok {
		r0 = rf(un)
	} else {
		r0 = ret.Get(0).(db.Bot)
	}

	return r0
}

// Database_GetBotByUniqueName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBotByUniqueName'
type Database_GetBotByUniqueName_Call struct {
	*mock.Call
}

// GetBotByUniqueName is a helper method to define mock.On call
//   - un string
func (_e *Database_Expecter) GetBotByUniqueName(un interface{}) *Database_GetBotByUniqueName_Call {
	return &Database_GetBotByUniqueName_Call{Call: _e.mock.On("GetBotByUniqueName", un)}
}

func (_c *Database_GetBotByUniqueName_Call) Run(run func(un string)) *Database_GetBotByUniqueName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetBotByUniqueName_Call) Return(_a0 db.Bot) *Database_GetBotByUniqueName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetBotByUniqueName_Call) RunAndReturn(run func(string) db.Bot) *Database_GetBotByUniqueName_Call {
	_c.Call.Return(run)
	return _c
}

// GetBotsByOwner provides a mock function with given fields: pubkey
func (_m *Database) GetBotsByOwner(pubkey string) []db.Bot {
	ret := _m.Called(pubkey)

	if len(ret) == 0 {
		panic("no return value specified for GetBotsByOwner")
	}

	var r0 []db.Bot
	if rf, ok := ret.Get(0).(func(string) []db.Bot); ok {
		r0 = rf(pubkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Bot)
		}
	}

	return r0
}

// Database_GetBotsByOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBotsByOwner'
type Database_GetBotsByOwner_Call struct {
	*mock.Call
}

// GetBotsByOwner is a helper method to define mock.On call
//   - pubkey string
func (_e *Database_Expecter) GetBotsByOwner(pubkey interface{}) *Database_GetBotsByOwner_Call {
	return &Database_GetBotsByOwner_Call{Call: _e.mock.On("GetBotsByOwner", pubkey)}
}

func (_c *Database_GetBotsByOwner_Call) Run(run func(pubkey string)) *Database_GetBotsByOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetBotsByOwner_Call) Return(_a0 []db.Bot) *Database_GetBotsByOwner_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetBotsByOwner_Call) RunAndReturn(run func(string) []db.Bot) *Database_GetBotsByOwner_Call {
	_c.Call.Return(run)
	return _c
}

// GetBountiesCount provides a mock function with given fields: r
func (_m *Database) GetBountiesCount(r *http.Request) int64 {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetBountiesCount")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(*http.Request) int64); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_GetBountiesCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBountiesCount'
type Database_GetBountiesCount_Call struct {
	*mock.Call
}

// GetBountiesCount is a helper method to define mock.On call
//   - r *http.Request
func (_e *Database_Expecter) GetBountiesCount(r interface{}) *Database_GetBountiesCount_Call {
	return &Database_GetBountiesCount_Call{Call: _e.mock.On("GetBountiesCount", r)}
}

func (_c *Database_GetBountiesCount_Call) Run(run func(r *http.Request)) *Database_GetBountiesCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *Database_GetBountiesCount_Call) Return(_a0 int64) *Database_GetBountiesCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetBountiesCount_Call) RunAndReturn(run func(*http.Request) int64) *Database_GetBountiesCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetBountiesLeaderboard provides a mock function with given fields:
func (_m *Database) GetBountiesLeaderboard() []db.LeaderData {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBountiesLeaderboard")
	}

	var r0 []db.LeaderData
	if rf, ok := ret.Get(0).(func() []db.LeaderData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.LeaderData)
		}
	}

	return r0
}

// Database_GetBountiesLeaderboard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBountiesLeaderboard'
type Database_GetBountiesLeaderboard_Call struct {
	*mock.Call
}

// GetBountiesLeaderboard is a helper method to define mock.On call
func (_e *Database_Expecter) GetBountiesLeaderboard() *Database_GetBountiesLeaderboard_Call {
	return &Database_GetBountiesLeaderboard_Call{Call: _e.mock.On("GetBountiesLeaderboard")}
}

func (_c *Database_GetBountiesLeaderboard_Call) Run(run func()) *Database_GetBountiesLeaderboard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_GetBountiesLeaderboard_Call) Return(_a0 []db.LeaderData) *Database_GetBountiesLeaderboard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetBountiesLeaderboard_Call) RunAndReturn(run func() []db.LeaderData) *Database_GetBountiesLeaderboard_Call {
	_c.Call.Return(run)
	return _c
}

// GetBounty provides a mock function with given fields: id
func (_m *Database) GetBounty(id uint) db.Bounty {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetBounty")
	}

	var r0 db.Bounty
	if rf, ok := ret.Get(0).(func(uint) db.Bounty); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(db.Bounty)
	}

	return r0
}

// Database_GetBounty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBounty'
type Database_GetBounty_Call struct {
	*mock.Call
}

// GetBounty is a helper method to define mock.On call
//   - id uint
func (_e *Database_Expecter) GetBounty(id interface{}) *Database_GetBounty_Call {
	return &Database_GetBounty_Call{Call: _e.mock.On("GetBounty", id)}
}

func (_c *Database_GetBounty_Call) Run(run func(id uint)) *Database_GetBounty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *Database_GetBounty_Call) Return(_a0 db.Bounty) *Database_GetBounty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetBounty_Call) RunAndReturn(run func(uint) db.Bounty) *Database_GetBounty_Call {
	_c.Call.Return(run)
	return _c
}

// GetBountyByCreated provides a mock function with given fields: created
func (_m *Database) GetBountyByCreated(created uint) (db.Bounty, error) {
	ret := _m.Called(created)

	if len(ret) == 0 {
		panic("no return value specified for GetBountyByCreated")
	}

	var r0 db.Bounty
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (db.Bounty, error)); ok {
		return rf(created)
	}
	if rf, ok := ret.Get(0).(func(uint) db.Bounty); ok {
		r0 = rf(created)
	} else {
		r0 = ret.Get(0).(db.Bounty)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(created)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetBountyByCreated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBountyByCreated'
type Database_GetBountyByCreated_Call struct {
	*mock.Call
}

// GetBountyByCreated is a helper method to define mock.On call
//   - created uint
func (_e *Database_Expecter) GetBountyByCreated(created interface{}) *Database_GetBountyByCreated_Call {
	return &Database_GetBountyByCreated_Call{Call: _e.mock.On("GetBountyByCreated", created)}
}

func (_c *Database_GetBountyByCreated_Call) Run(run func(created uint)) *Database_GetBountyByCreated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *Database_GetBountyByCreated_Call) Return(_a0 db.Bounty, _a1 error) *Database_GetBountyByCreated_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetBountyByCreated_Call) RunAndReturn(run func(uint) (db.Bounty, error)) *Database_GetBountyByCreated_Call {
	_c.Call.Return(run)
	return _c
}

// GetBountyById provides a mock function with given fields: id
func (_m *Database) GetBountyById(id string) ([]db.Bounty, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetBountyById")
	}

	var r0 []db.Bounty
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]db.Bounty, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) []db.Bounty); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Bounty)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetBountyById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBountyById'
type Database_GetBountyById_Call struct {
	*mock.Call
}

// GetBountyById is a helper method to define mock.On call
//   - id string
func (_e *Database_Expecter) GetBountyById(id interface{}) *Database_GetBountyById_Call {
	return &Database_GetBountyById_Call{Call: _e.mock.On("GetBountyById", id)}
}

func (_c *Database_GetBountyById_Call) Run(run func(id string)) *Database_GetBountyById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetBountyById_Call) Return(_a0 []db.Bounty, _a1 error) *Database_GetBountyById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetBountyById_Call) RunAndReturn(run func(string) ([]db.Bounty, error)) *Database_GetBountyById_Call {
	_c.Call.Return(run)
	return _c
}

// GetBountyDataByCreated provides a mock function with given fields: created
func (_m *Database) GetBountyDataByCreated(created string) ([]db.Bounty, error) {
	ret := _m.Called(created)

	if len(ret) == 0 {
		panic("no return value specified for GetBountyDataByCreated")
	}

	var r0 []db.Bounty
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]db.Bounty, error)); ok {
		return rf(created)
	}
	if rf, ok := ret.Get(0).(func(string) []db.Bounty); ok {
		r0 = rf(created)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Bounty)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(created)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetBountyDataByCreated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBountyDataByCreated'
type Database_GetBountyDataByCreated_Call struct {
	*mock.Call
}

// GetBountyDataByCreated is a helper method to define mock.On call
//   - created string
func (_e *Database_Expecter) GetBountyDataByCreated(created interface{}) *Database_GetBountyDataByCreated_Call {
	return &Database_GetBountyDataByCreated_Call{Call: _e.mock.On("GetBountyDataByCreated", created)}
}

func (_c *Database_GetBountyDataByCreated_Call) Run(run func(created string)) *Database_GetBountyDataByCreated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetBountyDataByCreated_Call) Return(_a0 []db.Bounty, _a1 error) *Database_GetBountyDataByCreated_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetBountyDataByCreated_Call) RunAndReturn(run func(string) ([]db.Bounty, error)) *Database_GetBountyDataByCreated_Call {
	_c.Call.Return(run)
	return _c
}

// GetBountyIndexById provides a mock function with given fields: id
func (_m *Database) GetBountyIndexById(id string) int64 {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetBountyIndexById")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_GetBountyIndexById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBountyIndexById'
type Database_GetBountyIndexById_Call struct {
	*mock.Call
}

// GetBountyIndexById is a helper method to define mock.On call
//   - id string
func (_e *Database_Expecter) GetBountyIndexById(id interface{}) *Database_GetBountyIndexById_Call {
	return &Database_GetBountyIndexById_Call{Call: _e.mock.On("GetBountyIndexById", id)}
}

func (_c *Database_GetBountyIndexById_Call) Run(run func(id string)) *Database_GetBountyIndexById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetBountyIndexById_Call) Return(_a0 int64) *Database_GetBountyIndexById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetBountyIndexById_Call) RunAndReturn(run func(string) int64) *Database_GetBountyIndexById_Call {
	_c.Call.Return(run)
	return _c
}

// GetBountyRoles provides a mock function with given fields:
func (_m *Database) GetBountyRoles() []db.BountyRoles {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBountyRoles")
	}

	var r0 []db.BountyRoles
	if rf, ok := ret.Get(0).(func() []db.BountyRoles); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.BountyRoles)
		}
	}

	return r0
}

// Database_GetBountyRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBountyRoles'
type Database_GetBountyRoles_Call struct {
	*mock.Call
}

// GetBountyRoles is a helper method to define mock.On call
func (_e *Database_Expecter) GetBountyRoles() *Database_GetBountyRoles_Call {
	return &Database_GetBountyRoles_Call{Call: _e.mock.On("GetBountyRoles")}
}

func (_c *Database_GetBountyRoles_Call) Run(run func()) *Database_GetBountyRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_GetBountyRoles_Call) Return(_a0 []db.BountyRoles) *Database_GetBountyRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetBountyRoles_Call) RunAndReturn(run func() []db.BountyRoles) *Database_GetBountyRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetChannel provides a mock function with given fields: id
func (_m *Database) GetChannel(id uint) db.Channel {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetChannel")
	}

	var r0 db.Channel
	if rf, ok := ret.Get(0).(func(uint) db.Channel); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(db.Channel)
	}

	return r0
}

// Database_GetChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChannel'
type Database_GetChannel_Call struct {
	*mock.Call
}

// GetChannel is a helper method to define mock.On call
//   - id uint
func (_e *Database_Expecter) GetChannel(id interface{}) *Database_GetChannel_Call {
	return &Database_GetChannel_Call{Call: _e.mock.On("GetChannel", id)}
}

func (_c *Database_GetChannel_Call) Run(run func(id uint)) *Database_GetChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *Database_GetChannel_Call) Return(_a0 db.Channel) *Database_GetChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetChannel_Call) RunAndReturn(run func(uint) db.Channel) *Database_GetChannel_Call {
	_c.Call.Return(run)
	return _c
}

// GetChannelsByTribe provides a mock function with given fields: tribe_uuid
func (_m *Database) GetChannelsByTribe(tribe_uuid string) []db.Channel {
	ret := _m.Called(tribe_uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelsByTribe")
	}

	var r0 []db.Channel
	if rf, ok := ret.Get(0).(func(string) []db.Channel); ok {
		r0 = rf(tribe_uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Channel)
		}
	}

	return r0
}

// Database_GetChannelsByTribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChannelsByTribe'
type Database_GetChannelsByTribe_Call struct {
	*mock.Call
}

// GetChannelsByTribe is a helper method to define mock.On call
//   - tribe_uuid string
func (_e *Database_Expecter) GetChannelsByTribe(tribe_uuid interface{}) *Database_GetChannelsByTribe_Call {
	return &Database_GetChannelsByTribe_Call{Call: _e.mock.On("GetChannelsByTribe", tribe_uuid)}
}

func (_c *Database_GetChannelsByTribe_Call) Run(run func(tribe_uuid string)) *Database_GetChannelsByTribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetChannelsByTribe_Call) Return(_a0 []db.Channel) *Database_GetChannelsByTribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetChannelsByTribe_Call) RunAndReturn(run func(string) []db.Channel) *Database_GetChannelsByTribe_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnectionCode provides a mock function with given fields:
func (_m *Database) GetConnectionCode() db.ConnectionCodesShort {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConnectionCode")
	}

	var r0 db.ConnectionCodesShort
	if rf, ok := ret.Get(0).(func() db.ConnectionCodesShort); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(db.ConnectionCodesShort)
	}

	return r0
}

// Database_GetConnectionCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnectionCode'
type Database_GetConnectionCode_Call struct {
	*mock.Call
}

// GetConnectionCode is a helper method to define mock.On call
func (_e *Database_Expecter) GetConnectionCode() *Database_GetConnectionCode_Call {
	return &Database_GetConnectionCode_Call{Call: _e.mock.On("GetConnectionCode")}
}

func (_c *Database_GetConnectionCode_Call) Run(run func()) *Database_GetConnectionCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_GetConnectionCode_Call) Return(_a0 db.ConnectionCodesShort) *Database_GetConnectionCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetConnectionCode_Call) RunAndReturn(run func() db.ConnectionCodesShort) *Database_GetConnectionCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreatedBounties provides a mock function with given fields: r
func (_m *Database) GetCreatedBounties(r *http.Request) ([]db.Bounty, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetCreatedBounties")
	}

	var r0 []db.Bounty
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) ([]db.Bounty, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) []db.Bounty); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Bounty)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetCreatedBounties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreatedBounties'
type Database_GetCreatedBounties_Call struct {
	*mock.Call
}

// GetCreatedBounties is a helper method to define mock.On call
//   - r *http.Request
func (_e *Database_Expecter) GetCreatedBounties(r interface{}) *Database_GetCreatedBounties_Call {
	return &Database_GetCreatedBounties_Call{Call: _e.mock.On("GetCreatedBounties", r)}
}

func (_c *Database_GetCreatedBounties_Call) Run(run func(r *http.Request)) *Database_GetCreatedBounties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *Database_GetCreatedBounties_Call) Return(_a0 []db.Bounty, _a1 error) *Database_GetCreatedBounties_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetCreatedBounties_Call) RunAndReturn(run func(*http.Request) ([]db.Bounty, error)) *Database_GetCreatedBounties_Call {
	_c.Call.Return(run)
	return _c
}

// GetFilterStatusCount provides a mock function with given fields:
func (_m *Database) GetFilterStatusCount() db.FilterStattuCount {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFilterStatusCount")
	}

	var r0 db.FilterStattuCount
	if rf, ok := ret.Get(0).(func() db.FilterStattuCount); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(db.FilterStattuCount)
	}

	return r0
}

// Database_GetFilterStatusCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFilterStatusCount'
type Database_GetFilterStatusCount_Call struct {
	*mock.Call
}

// GetFilterStatusCount is a helper method to define mock.On call
func (_e *Database_Expecter) GetFilterStatusCount() *Database_GetFilterStatusCount_Call {
	return &Database_GetFilterStatusCount_Call{Call: _e.mock.On("GetFilterStatusCount")}
}

func (_c *Database_GetFilterStatusCount_Call) Run(run func()) *Database_GetFilterStatusCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_GetFilterStatusCount_Call) Return(_a0 db.FilterStattuCount) *Database_GetFilterStatusCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetFilterStatusCount_Call) RunAndReturn(run func() db.FilterStattuCount) *Database_GetFilterStatusCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetFirstTribeByFeedURL provides a mock function with given fields: feedURL
func (_m *Database) GetFirstTribeByFeedURL(feedURL string) db.Tribe {
	ret := _m.Called(feedURL)

	if len(ret) == 0 {
		panic("no return value specified for GetFirstTribeByFeedURL")
	}

	var r0 db.Tribe
	if rf, ok := ret.Get(0).(func(string) db.Tribe); ok {
		r0 = rf(feedURL)
	} else {
		r0 = ret.Get(0).(db.Tribe)
	}

	return r0
}

// Database_GetFirstTribeByFeedURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFirstTribeByFeedURL'
type Database_GetFirstTribeByFeedURL_Call struct {
	*mock.Call
}

// GetFirstTribeByFeedURL is a helper method to define mock.On call
//   - feedURL string
func (_e *Database_Expecter) GetFirstTribeByFeedURL(feedURL interface{}) *Database_GetFirstTribeByFeedURL_Call {
	return &Database_GetFirstTribeByFeedURL_Call{Call: _e.mock.On("GetFirstTribeByFeedURL", feedURL)}
}

func (_c *Database_GetFirstTribeByFeedURL_Call) Run(run func(feedURL string)) *Database_GetFirstTribeByFeedURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetFirstTribeByFeedURL_Call) Return(_a0 db.Tribe) *Database_GetFirstTribeByFeedURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetFirstTribeByFeedURL_Call) RunAndReturn(run func(string) db.Tribe) *Database_GetFirstTribeByFeedURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetInvoice provides a mock function with given fields: payment_request
func (_m *Database) GetInvoice(payment_request string) db.InvoiceList {
	ret := _m.Called(payment_request)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoice")
	}

	var r0 db.InvoiceList
	if rf, ok := ret.Get(0).(func(string) db.InvoiceList); ok {
		r0 = rf(payment_request)
	} else {
		r0 = ret.Get(0).(db.InvoiceList)
	}

	return r0
}

// Database_GetInvoice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInvoice'
type Database_GetInvoice_Call struct {
	*mock.Call
}

// GetInvoice is a helper method to define mock.On call
//   - payment_request string
func (_e *Database_Expecter) GetInvoice(payment_request interface{}) *Database_GetInvoice_Call {
	return &Database_GetInvoice_Call{Call: _e.mock.On("GetInvoice", payment_request)}
}

func (_c *Database_GetInvoice_Call) Run(run func(payment_request string)) *Database_GetInvoice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetInvoice_Call) Return(_a0 db.InvoiceList) *Database_GetInvoice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetInvoice_Call) RunAndReturn(run func(string) db.InvoiceList) *Database_GetInvoice_Call {
	_c.Call.Return(run)
	return _c
}

// GetLeaderBoard provides a mock function with given fields: uuid
func (_m *Database) GetLeaderBoard(uuid string) []db.LeaderBoard {
	ret := _m.Called(uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetLeaderBoard")
	}

	var r0 []db.LeaderBoard
	if rf, ok := ret.Get(0).(func(string) []db.LeaderBoard); ok {
		r0 = rf(uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.LeaderBoard)
		}
	}

	return r0
}

// Database_GetLeaderBoard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLeaderBoard'
type Database_GetLeaderBoard_Call struct {
	*mock.Call
}

// GetLeaderBoard is a helper method to define mock.On call
//   - uuid string
func (_e *Database_Expecter) GetLeaderBoard(uuid interface{}) *Database_GetLeaderBoard_Call {
	return &Database_GetLeaderBoard_Call{Call: _e.mock.On("GetLeaderBoard", uuid)}
}

func (_c *Database_GetLeaderBoard_Call) Run(run func(uuid string)) *Database_GetLeaderBoard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetLeaderBoard_Call) Return(_a0 []db.LeaderBoard) *Database_GetLeaderBoard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetLeaderBoard_Call) RunAndReturn(run func(string) []db.LeaderBoard) *Database_GetLeaderBoard_Call {
	_c.Call.Return(run)
	return _c
}

// GetLeaderBoardByUuidAndAlias provides a mock function with given fields: uuid, alias
func (_m *Database) GetLeaderBoardByUuidAndAlias(uuid string, alias string) db.LeaderBoard {
	ret := _m.Called(uuid, alias)

	if len(ret) == 0 {
		panic("no return value specified for GetLeaderBoardByUuidAndAlias")
	}

	var r0 db.LeaderBoard
	if rf, ok := ret.Get(0).(func(string, string) db.LeaderBoard); ok {
		r0 = rf(uuid, alias)
	} else {
		r0 = ret.Get(0).(db.LeaderBoard)
	}

	return r0
}

// Database_GetLeaderBoardByUuidAndAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLeaderBoardByUuidAndAlias'
type Database_GetLeaderBoardByUuidAndAlias_Call struct {
	*mock.Call
}

// GetLeaderBoardByUuidAndAlias is a helper method to define mock.On call
//   - uuid string
//   - alias string
func (_e *Database_Expecter) GetLeaderBoardByUuidAndAlias(uuid interface{}, alias interface{}) *Database_GetLeaderBoardByUuidAndAlias_Call {
	return &Database_GetLeaderBoardByUuidAndAlias_Call{Call: _e.mock.On("GetLeaderBoardByUuidAndAlias", uuid, alias)}
}

func (_c *Database_GetLeaderBoardByUuidAndAlias_Call) Run(run func(uuid string, alias string)) *Database_GetLeaderBoardByUuidAndAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Database_GetLeaderBoardByUuidAndAlias_Call) Return(_a0 db.LeaderBoard) *Database_GetLeaderBoardByUuidAndAlias_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetLeaderBoardByUuidAndAlias_Call) RunAndReturn(run func(string, string) db.LeaderBoard) *Database_GetLeaderBoardByUuidAndAlias_Call {
	_c.Call.Return(run)
	return _c
}

// GetListedBots provides a mock function with given fields: r
func (_m *Database) GetListedBots(r *http.Request) []db.Bot {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetListedBots")
	}

	var r0 []db.Bot
	if rf, ok := ret.Get(0).(func(*http.Request) []db.Bot); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Bot)
		}
	}

	return r0
}

// Database_GetListedBots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListedBots'
type Database_GetListedBots_Call struct {
	*mock.Call
}

// GetListedBots is a helper method to define mock.On call
//   - r *http.Request
func (_e *Database_Expecter) GetListedBots(r interface{}) *Database_GetListedBots_Call {
	return &Database_GetListedBots_Call{Call: _e.mock.On("GetListedBots", r)}
}

func (_c *Database_GetListedBots_Call) Run(run func(r *http.Request)) *Database_GetListedBots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *Database_GetListedBots_Call) Return(_a0 []db.Bot) *Database_GetListedBots_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetListedBots_Call) RunAndReturn(run func(*http.Request) []db.Bot) *Database_GetListedBots_Call {
	_c.Call.Return(run)
	return _c
}

// GetListedOffers provides a mock function with given fields: r
func (_m *Database) GetListedOffers(r *http.Request) ([]db.PeopleExtra, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetListedOffers")
	}

	var r0 []db.PeopleExtra
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) ([]db.PeopleExtra, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) []db.PeopleExtra); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.PeopleExtra)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetListedOffers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListedOffers'
type Database_GetListedOffers_Call struct {
	*mock.Call
}

// GetListedOffers is a helper method to define mock.On call
//   - r *http.Request
func (_e *Database_Expecter) GetListedOffers(r interface{}) *Database_GetListedOffers_Call {
	return &Database_GetListedOffers_Call{Call: _e.mock.On("GetListedOffers", r)}
}

func (_c *Database_GetListedOffers_Call) Run(run func(r *http.Request)) *Database_GetListedOffers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *Database_GetListedOffers_Call) Return(_a0 []db.PeopleExtra, _a1 error) *Database_GetListedOffers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetListedOffers_Call) RunAndReturn(run func(*http.Request) ([]db.PeopleExtra, error)) *Database_GetListedOffers_Call {
	_c.Call.Return(run)
	return _c
}

// GetListedPeople provides a mock function with given fields: r
func (_m *Database) GetListedPeople(r *http.Request) []db.Person {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetListedPeople")
	}

	var r0 []db.Person
	if rf, ok := ret.Get(0).(func(*http.Request) []db.Person); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Person)
		}
	}

	return r0
}

// Database_GetListedPeople_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListedPeople'
type Database_GetListedPeople_Call struct {
	*mock.Call
}

// GetListedPeople is a helper method to define mock.On call
//   - r *http.Request
func (_e *Database_Expecter) GetListedPeople(r interface{}) *Database_GetListedPeople_Call {
	return &Database_GetListedPeople_Call{Call: _e.mock.On("GetListedPeople", r)}
}

func (_c *Database_GetListedPeople_Call) Run(run func(r *http.Request)) *Database_GetListedPeople_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *Database_GetListedPeople_Call) Return(_a0 []db.Person) *Database_GetListedPeople_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetListedPeople_Call) RunAndReturn(run func(*http.Request) []db.Person) *Database_GetListedPeople_Call {
	_c.Call.Return(run)
	return _c
}

// GetListedPosts provides a mock function with given fields: r
func (_m *Database) GetListedPosts(r *http.Request) ([]db.PeopleExtra, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetListedPosts")
	}

	var r0 []db.PeopleExtra
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) ([]db.PeopleExtra, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) []db.PeopleExtra); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.PeopleExtra)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetListedPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListedPosts'
type Database_GetListedPosts_Call struct {
	*mock.Call
}

// GetListedPosts is a helper method to define mock.On call
//   - r *http.Request
func (_e *Database_Expecter) GetListedPosts(r interface{}) *Database_GetListedPosts_Call {
	return &Database_GetListedPosts_Call{Call: _e.mock.On("GetListedPosts", r)}
}

func (_c *Database_GetListedPosts_Call) Run(run func(r *http.Request)) *Database_GetListedPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *Database_GetListedPosts_Call) Return(_a0 []db.PeopleExtra, _a1 error) *Database_GetListedPosts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetListedPosts_Call) RunAndReturn(run func(*http.Request) ([]db.PeopleExtra, error)) *Database_GetListedPosts_Call {
	_c.Call.Return(run)
	return _c
}

// GetListedTribes provides a mock function with given fields: r
func (_m *Database) GetListedTribes(r *http.Request) []db.Tribe {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetListedTribes")
	}

	var r0 []db.Tribe
	if rf, ok := ret.Get(0).(func(*http.Request) []db.Tribe); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Tribe)
		}
	}

	return r0
}

// Database_GetListedTribes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListedTribes'
type Database_GetListedTribes_Call struct {
	*mock.Call
}

// GetListedTribes is a helper method to define mock.On call
//   - r *http.Request
func (_e *Database_Expecter) GetListedTribes(r interface{}) *Database_GetListedTribes_Call {
	return &Database_GetListedTribes_Call{Call: _e.mock.On("GetListedTribes", r)}
}

func (_c *Database_GetListedTribes_Call) Run(run func(r *http.Request)) *Database_GetListedTribes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *Database_GetListedTribes_Call) Return(_a0 []db.Tribe) *Database_GetListedTribes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetListedTribes_Call) RunAndReturn(run func(*http.Request) []db.Tribe) *Database_GetListedTribes_Call {
	_c.Call.Return(run)
	return _c
}

// GetLnUser provides a mock function with given fields: lnKey
func (_m *Database) GetLnUser(lnKey string) int64 {
	ret := _m.Called(lnKey)

	if len(ret) == 0 {
		panic("no return value specified for GetLnUser")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(lnKey)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_GetLnUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLnUser'
type Database_GetLnUser_Call struct {
	*mock.Call
}

// GetLnUser is a helper method to define mock.On call
//   - lnKey string
func (_e *Database_Expecter) GetLnUser(lnKey interface{}) *Database_GetLnUser_Call {
	return &Database_GetLnUser_Call{Call: _e.mock.On("GetLnUser", lnKey)}
}

func (_c *Database_GetLnUser_Call) Run(run func(lnKey string)) *Database_GetLnUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetLnUser_Call) Return(_a0 int64) *Database_GetLnUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetLnUser_Call) RunAndReturn(run func(string) int64) *Database_GetLnUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetOpenGithubIssues provides a mock function with given fields: r
func (_m *Database) GetOpenGithubIssues(r *http.Request) (int64, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetOpenGithubIssues")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) (int64, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) int64); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetOpenGithubIssues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOpenGithubIssues'
type Database_GetOpenGithubIssues_Call struct {
	*mock.Call
}

// GetOpenGithubIssues is a helper method to define mock.On call
//   - r *http.Request
func (_e *Database_Expecter) GetOpenGithubIssues(r interface{}) *Database_GetOpenGithubIssues_Call {
	return &Database_GetOpenGithubIssues_Call{Call: _e.mock.On("GetOpenGithubIssues", r)}
}

func (_c *Database_GetOpenGithubIssues_Call) Run(run func(r *http.Request)) *Database_GetOpenGithubIssues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *Database_GetOpenGithubIssues_Call) Return(_a0 int64, _a1 error) *Database_GetOpenGithubIssues_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetOpenGithubIssues_Call) RunAndReturn(run func(*http.Request) (int64, error)) *Database_GetOpenGithubIssues_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationBounties provides a mock function with given fields: r, org_uuid
func (_m *Database) GetOrganizationBounties(r *http.Request, org_uuid string) []db.Bounty {
	ret := _m.Called(r, org_uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationBounties")
	}

	var r0 []db.Bounty
	if rf, ok := ret.Get(0).(func(*http.Request, string) []db.Bounty); ok {
		r0 = rf(r, org_uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Bounty)
		}
	}

	return r0
}

// Database_GetOrganizationBounties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationBounties'
type Database_GetOrganizationBounties_Call struct {
	*mock.Call
}

// GetOrganizationBounties is a helper method to define mock.On call
//   - r *http.Request
//   - org_uuid string
func (_e *Database_Expecter) GetOrganizationBounties(r interface{}, org_uuid interface{}) *Database_GetOrganizationBounties_Call {
	return &Database_GetOrganizationBounties_Call{Call: _e.mock.On("GetOrganizationBounties", r, org_uuid)}
}

func (_c *Database_GetOrganizationBounties_Call) Run(run func(r *http.Request, org_uuid string)) *Database_GetOrganizationBounties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request), args[1].(string))
	})
	return _c
}

func (_c *Database_GetOrganizationBounties_Call) Return(_a0 []db.Bounty) *Database_GetOrganizationBounties_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetOrganizationBounties_Call) RunAndReturn(run func(*http.Request, string) []db.Bounty) *Database_GetOrganizationBounties_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationBountyCount provides a mock function with given fields: uuid
func (_m *Database) GetOrganizationBountyCount(uuid string) int64 {
	ret := _m.Called(uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationBountyCount")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_GetOrganizationBountyCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationBountyCount'
type Database_GetOrganizationBountyCount_Call struct {
	*mock.Call
}

// GetOrganizationBountyCount is a helper method to define mock.On call
//   - uuid string
func (_e *Database_Expecter) GetOrganizationBountyCount(uuid interface{}) *Database_GetOrganizationBountyCount_Call {
	return &Database_GetOrganizationBountyCount_Call{Call: _e.mock.On("GetOrganizationBountyCount", uuid)}
}

func (_c *Database_GetOrganizationBountyCount_Call) Run(run func(uuid string)) *Database_GetOrganizationBountyCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetOrganizationBountyCount_Call) Return(_a0 int64) *Database_GetOrganizationBountyCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetOrganizationBountyCount_Call) RunAndReturn(run func(string) int64) *Database_GetOrganizationBountyCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationBudget provides a mock function with given fields: org_uuid
func (_m *Database) GetOrganizationBudget(org_uuid string) db.BountyBudget {
	ret := _m.Called(org_uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationBudget")
	}

	var r0 db.BountyBudget
	if rf, ok := ret.Get(0).(func(string) db.BountyBudget); ok {
		r0 = rf(org_uuid)
	} else {
		r0 = ret.Get(0).(db.BountyBudget)
	}

	return r0
}

// Database_GetOrganizationBudget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationBudget'
type Database_GetOrganizationBudget_Call struct {
	*mock.Call
}

// GetOrganizationBudget is a helper method to define mock.On call
//   - org_uuid string
func (_e *Database_Expecter) GetOrganizationBudget(org_uuid interface{}) *Database_GetOrganizationBudget_Call {
	return &Database_GetOrganizationBudget_Call{Call: _e.mock.On("GetOrganizationBudget", org_uuid)}
}

func (_c *Database_GetOrganizationBudget_Call) Run(run func(org_uuid string)) *Database_GetOrganizationBudget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetOrganizationBudget_Call) Return(_a0 db.BountyBudget) *Database_GetOrganizationBudget_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetOrganizationBudget_Call) RunAndReturn(run func(string) db.BountyBudget) *Database_GetOrganizationBudget_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationBudgetHistory provides a mock function with given fields: org_uuid
func (_m *Database) GetOrganizationBudgetHistory(org_uuid string) []db.BudgetHistoryData {
	ret := _m.Called(org_uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationBudgetHistory")
	}

	var r0 []db.BudgetHistoryData
	if rf, ok := ret.Get(0).(func(string) []db.BudgetHistoryData); ok {
		r0 = rf(org_uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.BudgetHistoryData)
		}
	}

	return r0
}

// Database_GetOrganizationBudgetHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationBudgetHistory'
type Database_GetOrganizationBudgetHistory_Call struct {
	*mock.Call
}

// GetOrganizationBudgetHistory is a helper method to define mock.On call
//   - org_uuid string
func (_e *Database_Expecter) GetOrganizationBudgetHistory(org_uuid interface{}) *Database_GetOrganizationBudgetHistory_Call {
	return &Database_GetOrganizationBudgetHistory_Call{Call: _e.mock.On("GetOrganizationBudgetHistory", org_uuid)}
}

func (_c *Database_GetOrganizationBudgetHistory_Call) Run(run func(org_uuid string)) *Database_GetOrganizationBudgetHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetOrganizationBudgetHistory_Call) Return(_a0 []db.BudgetHistoryData) *Database_GetOrganizationBudgetHistory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetOrganizationBudgetHistory_Call) RunAndReturn(run func(string) []db.BudgetHistoryData) *Database_GetOrganizationBudgetHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationByName provides a mock function with given fields: name
func (_m *Database) GetOrganizationByName(name string) db.Organization {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationByName")
	}

	var r0 db.Organization
	if rf, ok := ret.Get(0).(func(string) db.Organization); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(db.Organization)
	}

	return r0
}

// Database_GetOrganizationByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationByName'
type Database_GetOrganizationByName_Call struct {
	*mock.Call
}

// GetOrganizationByName is a helper method to define mock.On call
//   - name string
func (_e *Database_Expecter) GetOrganizationByName(name interface{}) *Database_GetOrganizationByName_Call {
	return &Database_GetOrganizationByName_Call{Call: _e.mock.On("GetOrganizationByName", name)}
}

func (_c *Database_GetOrganizationByName_Call) Run(run func(name string)) *Database_GetOrganizationByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetOrganizationByName_Call) Return(_a0 db.Organization) *Database_GetOrganizationByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetOrganizationByName_Call) RunAndReturn(run func(string) db.Organization) *Database_GetOrganizationByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationByUuid provides a mock function with given fields: uuid
func (_m *Database) GetOrganizationByUuid(uuid string) db.Organization {
	ret := _m.Called(uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationByUuid")
	}

	var r0 db.Organization
	if rf, ok := ret.Get(0).(func(string) db.Organization); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Get(0).(db.Organization)
	}

	return r0
}

// Database_GetOrganizationByUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationByUuid'
type Database_GetOrganizationByUuid_Call struct {
	*mock.Call
}

// GetOrganizationByUuid is a helper method to define mock.On call
//   - uuid string
func (_e *Database_Expecter) GetOrganizationByUuid(uuid interface{}) *Database_GetOrganizationByUuid_Call {
	return &Database_GetOrganizationByUuid_Call{Call: _e.mock.On("GetOrganizationByUuid", uuid)}
}

func (_c *Database_GetOrganizationByUuid_Call) Run(run func(uuid string)) *Database_GetOrganizationByUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetOrganizationByUuid_Call) Return(_a0 db.Organization) *Database_GetOrganizationByUuid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetOrganizationByUuid_Call) RunAndReturn(run func(string) db.Organization) *Database_GetOrganizationByUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationInvoices provides a mock function with given fields: org_uuid
func (_m *Database) GetOrganizationInvoices(org_uuid string) []db.InvoiceList {
	ret := _m.Called(org_uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationInvoices")
	}

	var r0 []db.InvoiceList
	if rf, ok := ret.Get(0).(func(string) []db.InvoiceList); ok {
		r0 = rf(org_uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.InvoiceList)
		}
	}

	return r0
}

// Database_GetOrganizationInvoices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationInvoices'
type Database_GetOrganizationInvoices_Call struct {
	*mock.Call
}

// GetOrganizationInvoices is a helper method to define mock.On call
//   - org_uuid string
func (_e *Database_Expecter) GetOrganizationInvoices(org_uuid interface{}) *Database_GetOrganizationInvoices_Call {
	return &Database_GetOrganizationInvoices_Call{Call: _e.mock.On("GetOrganizationInvoices", org_uuid)}
}

func (_c *Database_GetOrganizationInvoices_Call) Run(run func(org_uuid string)) *Database_GetOrganizationInvoices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetOrganizationInvoices_Call) Return(_a0 []db.InvoiceList) *Database_GetOrganizationInvoices_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetOrganizationInvoices_Call) RunAndReturn(run func(string) []db.InvoiceList) *Database_GetOrganizationInvoices_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationInvoicesCount provides a mock function with given fields: org_uuid
func (_m *Database) GetOrganizationInvoicesCount(org_uuid string) int64 {
	ret := _m.Called(org_uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationInvoicesCount")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(org_uuid)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_GetOrganizationInvoicesCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationInvoicesCount'
type Database_GetOrganizationInvoicesCount_Call struct {
	*mock.Call
}

// GetOrganizationInvoicesCount is a helper method to define mock.On call
//   - org_uuid string
func (_e *Database_Expecter) GetOrganizationInvoicesCount(org_uuid interface{}) *Database_GetOrganizationInvoicesCount_Call {
	return &Database_GetOrganizationInvoicesCount_Call{Call: _e.mock.On("GetOrganizationInvoicesCount", org_uuid)}
}

func (_c *Database_GetOrganizationInvoicesCount_Call) Run(run func(org_uuid string)) *Database_GetOrganizationInvoicesCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetOrganizationInvoicesCount_Call) Return(_a0 int64) *Database_GetOrganizationInvoicesCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetOrganizationInvoicesCount_Call) RunAndReturn(run func(string) int64) *Database_GetOrganizationInvoicesCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationUser provides a mock function with given fields: pubkey, org_uuid
func (_m *Database) GetOrganizationUser(pubkey string, org_uuid string) db.OrganizationUsers {
	ret := _m.Called(pubkey, org_uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationUser")
	}

	var r0 db.OrganizationUsers
	if rf, ok := ret.Get(0).(func(string, string) db.OrganizationUsers); ok {
		r0 = rf(pubkey, org_uuid)
	} else {
		r0 = ret.Get(0).(db.OrganizationUsers)
	}

	return r0
}

// Database_GetOrganizationUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationUser'
type Database_GetOrganizationUser_Call struct {
	*mock.Call
}

// GetOrganizationUser is a helper method to define mock.On call
//   - pubkey string
//   - org_uuid string
func (_e *Database_Expecter) GetOrganizationUser(pubkey interface{}, org_uuid interface{}) *Database_GetOrganizationUser_Call {
	return &Database_GetOrganizationUser_Call{Call: _e.mock.On("GetOrganizationUser", pubkey, org_uuid)}
}

func (_c *Database_GetOrganizationUser_Call) Run(run func(pubkey string, org_uuid string)) *Database_GetOrganizationUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Database_GetOrganizationUser_Call) Return(_a0 db.OrganizationUsers) *Database_GetOrganizationUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetOrganizationUser_Call) RunAndReturn(run func(string, string) db.OrganizationUsers) *Database_GetOrganizationUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationUsers provides a mock function with given fields: uuid
func (_m *Database) GetOrganizationUsers(uuid string) ([]db.OrganizationUsersData, error) {
	ret := _m.Called(uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationUsers")
	}

	var r0 []db.OrganizationUsersData
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]db.OrganizationUsersData, error)); ok {
		return rf(uuid)
	}
	if rf, ok := ret.Get(0).(func(string) []db.OrganizationUsersData); ok {
		r0 = rf(uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.OrganizationUsersData)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetOrganizationUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationUsers'
type Database_GetOrganizationUsers_Call struct {
	*mock.Call
}

// GetOrganizationUsers is a helper method to define mock.On call
//   - uuid string
func (_e *Database_Expecter) GetOrganizationUsers(uuid interface{}) *Database_GetOrganizationUsers_Call {
	return &Database_GetOrganizationUsers_Call{Call: _e.mock.On("GetOrganizationUsers", uuid)}
}

func (_c *Database_GetOrganizationUsers_Call) Run(run func(uuid string)) *Database_GetOrganizationUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetOrganizationUsers_Call) Return(_a0 []db.OrganizationUsersData, _a1 error) *Database_GetOrganizationUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetOrganizationUsers_Call) RunAndReturn(run func(string) ([]db.OrganizationUsersData, error)) *Database_GetOrganizationUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationUsersCount provides a mock function with given fields: uuid
func (_m *Database) GetOrganizationUsersCount(uuid string) int64 {
	ret := _m.Called(uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationUsersCount")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_GetOrganizationUsersCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationUsersCount'
type Database_GetOrganizationUsersCount_Call struct {
	*mock.Call
}

// GetOrganizationUsersCount is a helper method to define mock.On call
//   - uuid string
func (_e *Database_Expecter) GetOrganizationUsersCount(uuid interface{}) *Database_GetOrganizationUsersCount_Call {
	return &Database_GetOrganizationUsersCount_Call{Call: _e.mock.On("GetOrganizationUsersCount", uuid)}
}

func (_c *Database_GetOrganizationUsersCount_Call) Run(run func(uuid string)) *Database_GetOrganizationUsersCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetOrganizationUsersCount_Call) Return(_a0 int64) *Database_GetOrganizationUsersCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetOrganizationUsersCount_Call) RunAndReturn(run func(string) int64) *Database_GetOrganizationUsersCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizations provides a mock function with given fields: r
func (_m *Database) GetOrganizations(r *http.Request) []db.Organization {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizations")
	}

	var r0 []db.Organization
	if rf, ok := ret.Get(0).(func(*http.Request) []db.Organization); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Organization)
		}
	}

	return r0
}

// Database_GetOrganizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizations'
type Database_GetOrganizations_Call struct {
	*mock.Call
}

// GetOrganizations is a helper method to define mock.On call
//   - r *http.Request
func (_e *Database_Expecter) GetOrganizations(r interface{}) *Database_GetOrganizations_Call {
	return &Database_GetOrganizations_Call{Call: _e.mock.On("GetOrganizations", r)}
}

func (_c *Database_GetOrganizations_Call) Run(run func(r *http.Request)) *Database_GetOrganizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *Database_GetOrganizations_Call) Return(_a0 []db.Organization) *Database_GetOrganizations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetOrganizations_Call) RunAndReturn(run func(*http.Request) []db.Organization) *Database_GetOrganizations_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationsCount provides a mock function with given fields:
func (_m *Database) GetOrganizationsCount() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationsCount")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_GetOrganizationsCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationsCount'
type Database_GetOrganizationsCount_Call struct {
	*mock.Call
}

// GetOrganizationsCount is a helper method to define mock.On call
func (_e *Database_Expecter) GetOrganizationsCount() *Database_GetOrganizationsCount_Call {
	return &Database_GetOrganizationsCount_Call{Call: _e.mock.On("GetOrganizationsCount")}
}

func (_c *Database_GetOrganizationsCount_Call) Run(run func()) *Database_GetOrganizationsCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_GetOrganizationsCount_Call) Return(_a0 int64) *Database_GetOrganizationsCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetOrganizationsCount_Call) RunAndReturn(run func() int64) *Database_GetOrganizationsCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetPaymentHistory provides a mock function with given fields: org_uuid, r
func (_m *Database) GetPaymentHistory(org_uuid string, r *http.Request) []db.PaymentHistory {
	ret := _m.Called(org_uuid, r)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentHistory")
	}

	var r0 []db.PaymentHistory
	if rf, ok := ret.Get(0).(func(string, *http.Request) []db.PaymentHistory); ok {
		r0 = rf(org_uuid, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.PaymentHistory)
		}
	}

	return r0
}

// Database_GetPaymentHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaymentHistory'
type Database_GetPaymentHistory_Call struct {
	*mock.Call
}

// GetPaymentHistory is a helper method to define mock.On call
//   - org_uuid string
//   - r *http.Request
func (_e *Database_Expecter) GetPaymentHistory(org_uuid interface{}, r interface{}) *Database_GetPaymentHistory_Call {
	return &Database_GetPaymentHistory_Call{Call: _e.mock.On("GetPaymentHistory", org_uuid, r)}
}

func (_c *Database_GetPaymentHistory_Call) Run(run func(org_uuid string, r *http.Request)) *Database_GetPaymentHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*http.Request))
	})
	return _c
}

func (_c *Database_GetPaymentHistory_Call) Return(_a0 []db.PaymentHistory) *Database_GetPaymentHistory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetPaymentHistory_Call) RunAndReturn(run func(string, *http.Request) []db.PaymentHistory) *Database_GetPaymentHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetPaymentHistoryByCreated provides a mock function with given fields: created, org_uuid
func (_m *Database) GetPaymentHistoryByCreated(created *time.Time, org_uuid string) db.PaymentHistory {
	ret := _m.Called(created, org_uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentHistoryByCreated")
	}

	var r0 db.PaymentHistory
	if rf, ok := ret.Get(0).(func(*time.Time, string) db.PaymentHistory); ok {
		r0 = rf(created, org_uuid)
	} else {
		r0 = ret.Get(0).(db.PaymentHistory)
	}

	return r0
}

// Database_GetPaymentHistoryByCreated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaymentHistoryByCreated'
type Database_GetPaymentHistoryByCreated_Call struct {
	*mock.Call
}

// GetPaymentHistoryByCreated is a helper method to define mock.On call
//   - created *time.Time
//   - org_uuid string
func (_e *Database_Expecter) GetPaymentHistoryByCreated(created interface{}, org_uuid interface{}) *Database_GetPaymentHistoryByCreated_Call {
	return &Database_GetPaymentHistoryByCreated_Call{Call: _e.mock.On("GetPaymentHistoryByCreated", created, org_uuid)}
}

func (_c *Database_GetPaymentHistoryByCreated_Call) Run(run func(created *time.Time, org_uuid string)) *Database_GetPaymentHistoryByCreated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*time.Time), args[1].(string))
	})
	return _c
}

func (_c *Database_GetPaymentHistoryByCreated_Call) Return(_a0 db.PaymentHistory) *Database_GetPaymentHistoryByCreated_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetPaymentHistoryByCreated_Call) RunAndReturn(run func(*time.Time, string) db.PaymentHistory) *Database_GetPaymentHistoryByCreated_Call {
	_c.Call.Return(run)
	return _c
}

// GetPeopleBySearch provides a mock function with given fields: r
func (_m *Database) GetPeopleBySearch(r *http.Request) []db.Person {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetPeopleBySearch")
	}

	var r0 []db.Person
	if rf, ok := ret.Get(0).(func(*http.Request) []db.Person); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Person)
		}
	}

	return r0
}

// Database_GetPeopleBySearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPeopleBySearch'
type Database_GetPeopleBySearch_Call struct {
	*mock.Call
}

// GetPeopleBySearch is a helper method to define mock.On call
//   - r *http.Request
func (_e *Database_Expecter) GetPeopleBySearch(r interface{}) *Database_GetPeopleBySearch_Call {
	return &Database_GetPeopleBySearch_Call{Call: _e.mock.On("GetPeopleBySearch", r)}
}

func (_c *Database_GetPeopleBySearch_Call) Run(run func(r *http.Request)) *Database_GetPeopleBySearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *Database_GetPeopleBySearch_Call) Return(_a0 []db.Person) *Database_GetPeopleBySearch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetPeopleBySearch_Call) RunAndReturn(run func(*http.Request) []db.Person) *Database_GetPeopleBySearch_Call {
	_c.Call.Return(run)
	return _c
}

// GetPeopleListShort provides a mock function with given fields: count
func (_m *Database) GetPeopleListShort(count uint32) *[]db.PersonInShort {
	ret := _m.Called(count)

	if len(ret) == 0 {
		panic("no return value specified for GetPeopleListShort")
	}

	var r0 *[]db.PersonInShort
	if rf, ok := ret.Get(0).(func(uint32) *[]db.PersonInShort); ok {
		r0 = rf(count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]db.PersonInShort)
		}
	}

	return r0
}

// Database_GetPeopleListShort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPeopleListShort'
type Database_GetPeopleListShort_Call struct {
	*mock.Call
}

// GetPeopleListShort is a helper method to define mock.On call
//   - count uint32
func (_e *Database_Expecter) GetPeopleListShort(count interface{}) *Database_GetPeopleListShort_Call {
	return &Database_GetPeopleListShort_Call{Call: _e.mock.On("GetPeopleListShort", count)}
}

func (_c *Database_GetPeopleListShort_Call) Run(run func(count uint32)) *Database_GetPeopleListShort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint32))
	})
	return _c
}

func (_c *Database_GetPeopleListShort_Call) Return(_a0 *[]db.PersonInShort) *Database_GetPeopleListShort_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetPeopleListShort_Call) RunAndReturn(run func(uint32) *[]db.PersonInShort) *Database_GetPeopleListShort_Call {
	_c.Call.Return(run)
	return _c
}

// GetPerson provides a mock function with given fields: id
func (_m *Database) GetPerson(id uint) db.Person {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetPerson")
	}

	var r0 db.Person
	if rf, ok := ret.Get(0).(func(uint) db.Person); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(db.Person)
	}

	return r0
}

// Database_GetPerson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPerson'
type Database_GetPerson_Call struct {
	*mock.Call
}

// GetPerson is a helper method to define mock.On call
//   - id uint
func (_e *Database_Expecter) GetPerson(id interface{}) *Database_GetPerson_Call {
	return &Database_GetPerson_Call{Call: _e.mock.On("GetPerson", id)}
}

func (_c *Database_GetPerson_Call) Run(run func(id uint)) *Database_GetPerson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *Database_GetPerson_Call) Return(_a0 db.Person) *Database_GetPerson_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetPerson_Call) RunAndReturn(run func(uint) db.Person) *Database_GetPerson_Call {
	_c.Call.Return(run)
	return _c
}

// GetPersonByGithubName provides a mock function with given fields: github_name
func (_m *Database) GetPersonByGithubName(github_name string) db.Person {
	ret := _m.Called(github_name)

	if len(ret) == 0 {
		panic("no return value specified for GetPersonByGithubName")
	}

	var r0 db.Person
	if rf, ok := ret.Get(0).(func(string) db.Person); ok {
		r0 = rf(github_name)
	} else {
		r0 = ret.Get(0).(db.Person)
	}

	return r0
}

// Database_GetPersonByGithubName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersonByGithubName'
type Database_GetPersonByGithubName_Call struct {
	*mock.Call
}

// GetPersonByGithubName is a helper method to define mock.On call
//   - github_name string
func (_e *Database_Expecter) GetPersonByGithubName(github_name interface{}) *Database_GetPersonByGithubName_Call {
	return &Database_GetPersonByGithubName_Call{Call: _e.mock.On("GetPersonByGithubName", github_name)}
}

func (_c *Database_GetPersonByGithubName_Call) Run(run func(github_name string)) *Database_GetPersonByGithubName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetPersonByGithubName_Call) Return(_a0 db.Person) *Database_GetPersonByGithubName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetPersonByGithubName_Call) RunAndReturn(run func(string) db.Person) *Database_GetPersonByGithubName_Call {
	_c.Call.Return(run)
	return _c
}

// GetPersonByUniqueName provides a mock function with given fields: un
func (_m *Database) GetPersonByUniqueName(un string) db.Person {
	ret := _m.Called(un)

	if len(ret) == 0 {
		panic("no return value specified for GetPersonByUniqueName")
	}

	var r0 db.Person
	if rf, ok := ret.Get(0).(func(string) db.Person); ok {
		r0 = rf(un)
	} else {
		r0 = ret.Get(0).(db.Person)
	}

	return r0
}

// Database_GetPersonByUniqueName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersonByUniqueName'
type Database_GetPersonByUniqueName_Call struct {
	*mock.Call
}

// GetPersonByUniqueName is a helper method to define mock.On call
//   - un string
func (_e *Database_Expecter) GetPersonByUniqueName(un interface{}) *Database_GetPersonByUniqueName_Call {
	return &Database_GetPersonByUniqueName_Call{Call: _e.mock.On("GetPersonByUniqueName", un)}
}

func (_c *Database_GetPersonByUniqueName_Call) Run(run func(un string)) *Database_GetPersonByUniqueName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetPersonByUniqueName_Call) Return(_a0 db.Person) *Database_GetPersonByUniqueName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetPersonByUniqueName_Call) RunAndReturn(run func(string) db.Person) *Database_GetPersonByUniqueName_Call {
	_c.Call.Return(run)
	return _c
}

// GetPersonByUuid provides a mock function with given fields: uuid
func (_m *Database) GetPersonByUuid(uuid string) db.Person {
	ret := _m.Called(uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetPersonByUuid")
	}

	var r0 db.Person
	if rf, ok := ret.Get(0).(func(string) db.Person); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Get(0).(db.Person)
	}

	return r0
}

// Database_GetPersonByUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersonByUuid'
type Database_GetPersonByUuid_Call struct {
	*mock.Call
}

// GetPersonByUuid is a helper method to define mock.On call
//   - uuid string
func (_e *Database_Expecter) GetPersonByUuid(uuid interface{}) *Database_GetPersonByUuid_Call {
	return &Database_GetPersonByUuid_Call{Call: _e.mock.On("GetPersonByUuid", uuid)}
}

func (_c *Database_GetPersonByUuid_Call) Run(run func(uuid string)) *Database_GetPersonByUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetPersonByUuid_Call) Return(_a0 db.Person) *Database_GetPersonByUuid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetPersonByUuid_Call) RunAndReturn(run func(string) db.Person) *Database_GetPersonByUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetTribe provides a mock function with given fields: uuid
func (_m *Database) GetTribe(uuid string) db.Tribe {
	ret := _m.Called(uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetTribe")
	}

	var r0 db.Tribe
	if rf, ok := ret.Get(0).(func(string) db.Tribe); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Get(0).(db.Tribe)
	}

	return r0
}

// Database_GetTribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTribe'
type Database_GetTribe_Call struct {
	*mock.Call
}

// GetTribe is a helper method to define mock.On call
//   - uuid string
func (_e *Database_Expecter) GetTribe(uuid interface{}) *Database_GetTribe_Call {
	return &Database_GetTribe_Call{Call: _e.mock.On("GetTribe", uuid)}
}

func (_c *Database_GetTribe_Call) Run(run func(uuid string)) *Database_GetTribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetTribe_Call) Return(_a0 db.Tribe) *Database_GetTribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetTribe_Call) RunAndReturn(run func(string) db.Tribe) *Database_GetTribe_Call {
	_c.Call.Return(run)
	return _c
}

// GetTribeByIdAndPubkey provides a mock function with given fields: uuid, pubkey
func (_m *Database) GetTribeByIdAndPubkey(uuid string, pubkey string) db.Tribe {
	ret := _m.Called(uuid, pubkey)

	if len(ret) == 0 {
		panic("no return value specified for GetTribeByIdAndPubkey")
	}

	var r0 db.Tribe
	if rf, ok := ret.Get(0).(func(string, string) db.Tribe); ok {
		r0 = rf(uuid, pubkey)
	} else {
		r0 = ret.Get(0).(db.Tribe)
	}

	return r0
}

// Database_GetTribeByIdAndPubkey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTribeByIdAndPubkey'
type Database_GetTribeByIdAndPubkey_Call struct {
	*mock.Call
}

// GetTribeByIdAndPubkey is a helper method to define mock.On call
//   - uuid string
//   - pubkey string
func (_e *Database_Expecter) GetTribeByIdAndPubkey(uuid interface{}, pubkey interface{}) *Database_GetTribeByIdAndPubkey_Call {
	return &Database_GetTribeByIdAndPubkey_Call{Call: _e.mock.On("GetTribeByIdAndPubkey", uuid, pubkey)}
}

func (_c *Database_GetTribeByIdAndPubkey_Call) Run(run func(uuid string, pubkey string)) *Database_GetTribeByIdAndPubkey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Database_GetTribeByIdAndPubkey_Call) Return(_a0 db.Tribe) *Database_GetTribeByIdAndPubkey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetTribeByIdAndPubkey_Call) RunAndReturn(run func(string, string) db.Tribe) *Database_GetTribeByIdAndPubkey_Call {
	_c.Call.Return(run)
	return _c
}

// GetTribeByUniqueName provides a mock function with given fields: un
func (_m *Database) GetTribeByUniqueName(un string) db.Tribe {
	ret := _m.Called(un)

	if len(ret) == 0 {
		panic("no return value specified for GetTribeByUniqueName")
	}

	var r0 db.Tribe
	if rf, ok := ret.Get(0).(func(string) db.Tribe); ok {
		r0 = rf(un)
	} else {
		r0 = ret.Get(0).(db.Tribe)
	}

	return r0
}

// Database_GetTribeByUniqueName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTribeByUniqueName'
type Database_GetTribeByUniqueName_Call struct {
	*mock.Call
}

// GetTribeByUniqueName is a helper method to define mock.On call
//   - un string
func (_e *Database_Expecter) GetTribeByUniqueName(un interface{}) *Database_GetTribeByUniqueName_Call {
	return &Database_GetTribeByUniqueName_Call{Call: _e.mock.On("GetTribeByUniqueName", un)}
}

func (_c *Database_GetTribeByUniqueName_Call) Run(run func(un string)) *Database_GetTribeByUniqueName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetTribeByUniqueName_Call) Return(_a0 db.Tribe) *Database_GetTribeByUniqueName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetTribeByUniqueName_Call) RunAndReturn(run func(string) db.Tribe) *Database_GetTribeByUniqueName_Call {
	_c.Call.Return(run)
	return _c
}

// GetTribesByAppUrl provides a mock function with given fields: aurl
func (_m *Database) GetTribesByAppUrl(aurl string) []db.Tribe {
	ret := _m.Called(aurl)

	if len(ret) == 0 {
		panic("no return value specified for GetTribesByAppUrl")
	}

	var r0 []db.Tribe
	if rf, ok := ret.Get(0).(func(string) []db.Tribe); ok {
		r0 = rf(aurl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Tribe)
		}
	}

	return r0
}

// Database_GetTribesByAppUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTribesByAppUrl'
type Database_GetTribesByAppUrl_Call struct {
	*mock.Call
}

// GetTribesByAppUrl is a helper method to define mock.On call
//   - aurl string
func (_e *Database_Expecter) GetTribesByAppUrl(aurl interface{}) *Database_GetTribesByAppUrl_Call {
	return &Database_GetTribesByAppUrl_Call{Call: _e.mock.On("GetTribesByAppUrl", aurl)}
}

func (_c *Database_GetTribesByAppUrl_Call) Run(run func(aurl string)) *Database_GetTribesByAppUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetTribesByAppUrl_Call) Return(_a0 []db.Tribe) *Database_GetTribesByAppUrl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetTribesByAppUrl_Call) RunAndReturn(run func(string) []db.Tribe) *Database_GetTribesByAppUrl_Call {
	_c.Call.Return(run)
	return _c
}

// GetTribesByOwner provides a mock function with given fields: pubkey
func (_m *Database) GetTribesByOwner(pubkey string) []db.Tribe {
	ret := _m.Called(pubkey)

	if len(ret) == 0 {
		panic("no return value specified for GetTribesByOwner")
	}

	var r0 []db.Tribe
	if rf, ok := ret.Get(0).(func(string) []db.Tribe); ok {
		r0 = rf(pubkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Tribe)
		}
	}

	return r0
}

// Database_GetTribesByOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTribesByOwner'
type Database_GetTribesByOwner_Call struct {
	*mock.Call
}

// GetTribesByOwner is a helper method to define mock.On call
//   - pubkey string
func (_e *Database_Expecter) GetTribesByOwner(pubkey interface{}) *Database_GetTribesByOwner_Call {
	return &Database_GetTribesByOwner_Call{Call: _e.mock.On("GetTribesByOwner", pubkey)}
}

func (_c *Database_GetTribesByOwner_Call) Run(run func(pubkey string)) *Database_GetTribesByOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetTribesByOwner_Call) Return(_a0 []db.Tribe) *Database_GetTribesByOwner_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetTribesByOwner_Call) RunAndReturn(run func(string) []db.Tribe) *Database_GetTribesByOwner_Call {
	_c.Call.Return(run)
	return _c
}

// GetTribesTotal provides a mock function with given fields:
func (_m *Database) GetTribesTotal() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTribesTotal")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_GetTribesTotal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTribesTotal'
type Database_GetTribesTotal_Call struct {
	*mock.Call
}

// GetTribesTotal is a helper method to define mock.On call
func (_e *Database_Expecter) GetTribesTotal() *Database_GetTribesTotal_Call {
	return &Database_GetTribesTotal_Call{Call: _e.mock.On("GetTribesTotal")}
}

func (_c *Database_GetTribesTotal_Call) Run(run func()) *Database_GetTribesTotal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_GetTribesTotal_Call) Return(_a0 int64) *Database_GetTribesTotal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetTribesTotal_Call) RunAndReturn(run func() int64) *Database_GetTribesTotal_Call {
	_c.Call.Return(run)
	return _c
}

// GetUnconfirmedGithub provides a mock function with given fields:
func (_m *Database) GetUnconfirmedGithub() []db.Person {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUnconfirmedGithub")
	}

	var r0 []db.Person
	if rf, ok := ret.Get(0).(func() []db.Person); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Person)
		}
	}

	return r0
}

// Database_GetUnconfirmedGithub_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUnconfirmedGithub'
type Database_GetUnconfirmedGithub_Call struct {
	*mock.Call
}

// GetUnconfirmedGithub is a helper method to define mock.On call
func (_e *Database_Expecter) GetUnconfirmedGithub() *Database_GetUnconfirmedGithub_Call {
	return &Database_GetUnconfirmedGithub_Call{Call: _e.mock.On("GetUnconfirmedGithub")}
}

func (_c *Database_GetUnconfirmedGithub_Call) Run(run func()) *Database_GetUnconfirmedGithub_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_GetUnconfirmedGithub_Call) Return(_a0 []db.Person) *Database_GetUnconfirmedGithub_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetUnconfirmedGithub_Call) RunAndReturn(run func() []db.Person) *Database_GetUnconfirmedGithub_Call {
	_c.Call.Return(run)
	return _c
}

// GetUnconfirmedTwitter provides a mock function with given fields:
func (_m *Database) GetUnconfirmedTwitter() []db.Person {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUnconfirmedTwitter")
	}

	var r0 []db.Person
	if rf, ok := ret.Get(0).(func() []db.Person); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Person)
		}
	}

	return r0
}

// Database_GetUnconfirmedTwitter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUnconfirmedTwitter'
type Database_GetUnconfirmedTwitter_Call struct {
	*mock.Call
}

// GetUnconfirmedTwitter is a helper method to define mock.On call
func (_e *Database_Expecter) GetUnconfirmedTwitter() *Database_GetUnconfirmedTwitter_Call {
	return &Database_GetUnconfirmedTwitter_Call{Call: _e.mock.On("GetUnconfirmedTwitter")}
}

func (_c *Database_GetUnconfirmedTwitter_Call) Run(run func()) *Database_GetUnconfirmedTwitter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_GetUnconfirmedTwitter_Call) Return(_a0 []db.Person) *Database_GetUnconfirmedTwitter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetUnconfirmedTwitter_Call) RunAndReturn(run func() []db.Person) *Database_GetUnconfirmedTwitter_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserAssignedOrganizations provides a mock function with given fields: pubkey
func (_m *Database) GetUserAssignedOrganizations(pubkey string) []db.OrganizationUsers {
	ret := _m.Called(pubkey)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAssignedOrganizations")
	}

	var r0 []db.OrganizationUsers
	if rf, ok := ret.Get(0).(func(string) []db.OrganizationUsers); ok {
		r0 = rf(pubkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.OrganizationUsers)
		}
	}

	return r0
}

// Database_GetUserAssignedOrganizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserAssignedOrganizations'
type Database_GetUserAssignedOrganizations_Call struct {
	*mock.Call
}

// GetUserAssignedOrganizations is a helper method to define mock.On call
//   - pubkey string
func (_e *Database_Expecter) GetUserAssignedOrganizations(pubkey interface{}) *Database_GetUserAssignedOrganizations_Call {
	return &Database_GetUserAssignedOrganizations_Call{Call: _e.mock.On("GetUserAssignedOrganizations", pubkey)}
}

func (_c *Database_GetUserAssignedOrganizations_Call) Run(run func(pubkey string)) *Database_GetUserAssignedOrganizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetUserAssignedOrganizations_Call) Return(_a0 []db.OrganizationUsers) *Database_GetUserAssignedOrganizations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetUserAssignedOrganizations_Call) RunAndReturn(run func(string) []db.OrganizationUsers) *Database_GetUserAssignedOrganizations_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserBountiesCount provides a mock function with given fields: personKey, tabType
func (_m *Database) GetUserBountiesCount(personKey string, tabType string) int64 {
	ret := _m.Called(personKey, tabType)

	if len(ret) == 0 {
		panic("no return value specified for GetUserBountiesCount")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, string) int64); ok {
		r0 = rf(personKey, tabType)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_GetUserBountiesCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserBountiesCount'
type Database_GetUserBountiesCount_Call struct {
	*mock.Call
}

// GetUserBountiesCount is a helper method to define mock.On call
//   - personKey string
//   - tabType string
func (_e *Database_Expecter) GetUserBountiesCount(personKey interface{}, tabType interface{}) *Database_GetUserBountiesCount_Call {
	return &Database_GetUserBountiesCount_Call{Call: _e.mock.On("GetUserBountiesCount", personKey, tabType)}
}

func (_c *Database_GetUserBountiesCount_Call) Run(run func(personKey string, tabType string)) *Database_GetUserBountiesCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Database_GetUserBountiesCount_Call) Return(_a0 int64) *Database_GetUserBountiesCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetUserBountiesCount_Call) RunAndReturn(run func(string, string) int64) *Database_GetUserBountiesCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserCreatedOrganizations provides a mock function with given fields: pubkey
func (_m *Database) GetUserCreatedOrganizations(pubkey string) []db.Organization {
	ret := _m.Called(pubkey)

	if len(ret) == 0 {
		panic("no return value specified for GetUserCreatedOrganizations")
	}

	var r0 []db.Organization
	if rf, ok := ret.Get(0).(func(string) []db.Organization); ok {
		r0 = rf(pubkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Organization)
		}
	}

	return r0
}

// Database_GetUserCreatedOrganizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserCreatedOrganizations'
type Database_GetUserCreatedOrganizations_Call struct {
	*mock.Call
}

// GetUserCreatedOrganizations is a helper method to define mock.On call
//   - pubkey string
func (_e *Database_Expecter) GetUserCreatedOrganizations(pubkey interface{}) *Database_GetUserCreatedOrganizations_Call {
	return &Database_GetUserCreatedOrganizations_Call{Call: _e.mock.On("GetUserCreatedOrganizations", pubkey)}
}

func (_c *Database_GetUserCreatedOrganizations_Call) Run(run func(pubkey string)) *Database_GetUserCreatedOrganizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetUserCreatedOrganizations_Call) Return(_a0 []db.Organization) *Database_GetUserCreatedOrganizations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetUserCreatedOrganizations_Call) RunAndReturn(run func(string) []db.Organization) *Database_GetUserCreatedOrganizations_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserInvoiceData provides a mock function with given fields: payment_request
func (_m *Database) GetUserInvoiceData(payment_request string) db.UserInvoiceData {
	ret := _m.Called(payment_request)

	if len(ret) == 0 {
		panic("no return value specified for GetUserInvoiceData")
	}

	var r0 db.UserInvoiceData
	if rf, ok := ret.Get(0).(func(string) db.UserInvoiceData); ok {
		r0 = rf(payment_request)
	} else {
		r0 = ret.Get(0).(db.UserInvoiceData)
	}

	return r0
}

// Database_GetUserInvoiceData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserInvoiceData'
type Database_GetUserInvoiceData_Call struct {
	*mock.Call
}

// GetUserInvoiceData is a helper method to define mock.On call
//   - payment_request string
func (_e *Database_Expecter) GetUserInvoiceData(payment_request interface{}) *Database_GetUserInvoiceData_Call {
	return &Database_GetUserInvoiceData_Call{Call: _e.mock.On("GetUserInvoiceData", payment_request)}
}

func (_c *Database_GetUserInvoiceData_Call) Run(run func(payment_request string)) *Database_GetUserInvoiceData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetUserInvoiceData_Call) Return(_a0 db.UserInvoiceData) *Database_GetUserInvoiceData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetUserInvoiceData_Call) RunAndReturn(run func(string) db.UserInvoiceData) *Database_GetUserInvoiceData_Call {
	_c.Call.Return(run)
	return _c
}

// NewHuntersPaid provides a mock function with given fields: r
func (_m *Database) NewHuntersPaid(r db.PaymentDateRange) int64 {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for NewHuntersPaid")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(db.PaymentDateRange) int64); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_NewHuntersPaid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewHuntersPaid'
type Database_NewHuntersPaid_Call struct {
	*mock.Call
}

// NewHuntersPaid is a helper method to define mock.On call
//   - r db.PaymentDateRange
func (_e *Database_Expecter) NewHuntersPaid(r interface{}) *Database_NewHuntersPaid_Call {
	return &Database_NewHuntersPaid_Call{Call: _e.mock.On("NewHuntersPaid", r)}
}

func (_c *Database_NewHuntersPaid_Call) Run(run func(r db.PaymentDateRange)) *Database_NewHuntersPaid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.PaymentDateRange))
	})
	return _c
}

func (_c *Database_NewHuntersPaid_Call) Return(_a0 int64) *Database_NewHuntersPaid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_NewHuntersPaid_Call) RunAndReturn(run func(db.PaymentDateRange) int64) *Database_NewHuntersPaid_Call {
	_c.Call.Return(run)
	return _c
}

// SatsPaidPercentage provides a mock function with given fields: r
func (_m *Database) SatsPaidPercentage(r db.PaymentDateRange) uint {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for SatsPaidPercentage")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func(db.PaymentDateRange) uint); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// Database_SatsPaidPercentage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SatsPaidPercentage'
type Database_SatsPaidPercentage_Call struct {
	*mock.Call
}

// SatsPaidPercentage is a helper method to define mock.On call
//   - r db.PaymentDateRange
func (_e *Database_Expecter) SatsPaidPercentage(r interface{}) *Database_SatsPaidPercentage_Call {
	return &Database_SatsPaidPercentage_Call{Call: _e.mock.On("SatsPaidPercentage", r)}
}

func (_c *Database_SatsPaidPercentage_Call) Run(run func(r db.PaymentDateRange)) *Database_SatsPaidPercentage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.PaymentDateRange))
	})
	return _c
}

func (_c *Database_SatsPaidPercentage_Call) Return(_a0 uint) *Database_SatsPaidPercentage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_SatsPaidPercentage_Call) RunAndReturn(run func(db.PaymentDateRange) uint) *Database_SatsPaidPercentage_Call {
	_c.Call.Return(run)
	return _c
}

// SearchBots provides a mock function with given fields: s, limit, offset
func (_m *Database) SearchBots(s string, limit int, offset int) []db.BotRes {
	ret := _m.Called(s, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for SearchBots")
	}

	var r0 []db.BotRes
	if rf, ok := ret.Get(0).(func(string, int, int) []db.BotRes); ok {
		r0 = rf(s, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.BotRes)
		}
	}

	return r0
}

// Database_SearchBots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchBots'
type Database_SearchBots_Call struct {
	*mock.Call
}

// SearchBots is a helper method to define mock.On call
//   - s string
//   - limit int
//   - offset int
func (_e *Database_Expecter) SearchBots(s interface{}, limit interface{}, offset interface{}) *Database_SearchBots_Call {
	return &Database_SearchBots_Call{Call: _e.mock.On("SearchBots", s, limit, offset)}
}

func (_c *Database_SearchBots_Call) Run(run func(s string, limit int, offset int)) *Database_SearchBots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *Database_SearchBots_Call) Return(_a0 []db.BotRes) *Database_SearchBots_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_SearchBots_Call) RunAndReturn(run func(string, int, int) []db.BotRes) *Database_SearchBots_Call {
	_c.Call.Return(run)
	return _c
}

// SearchPeople provides a mock function with given fields: s, limit, offset
func (_m *Database) SearchPeople(s string, limit int, offset int) []db.Person {
	ret := _m.Called(s, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for SearchPeople")
	}

	var r0 []db.Person
	if rf, ok := ret.Get(0).(func(string, int, int) []db.Person); ok {
		r0 = rf(s, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Person)
		}
	}

	return r0
}

// Database_SearchPeople_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchPeople'
type Database_SearchPeople_Call struct {
	*mock.Call
}

// SearchPeople is a helper method to define mock.On call
//   - s string
//   - limit int
//   - offset int
func (_e *Database_Expecter) SearchPeople(s interface{}, limit interface{}, offset interface{}) *Database_SearchPeople_Call {
	return &Database_SearchPeople_Call{Call: _e.mock.On("SearchPeople", s, limit, offset)}
}

func (_c *Database_SearchPeople_Call) Run(run func(s string, limit int, offset int)) *Database_SearchPeople_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *Database_SearchPeople_Call) Return(_a0 []db.Person) *Database_SearchPeople_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_SearchPeople_Call) RunAndReturn(run func(string, int, int) []db.Person) *Database_SearchPeople_Call {
	_c.Call.Return(run)
	return _c
}

// SearchTribes provides a mock function with given fields: s
func (_m *Database) SearchTribes(s string) []db.Tribe {
	ret := _m.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for SearchTribes")
	}

	var r0 []db.Tribe
	if rf, ok := ret.Get(0).(func(string) []db.Tribe); ok {
		r0 = rf(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Tribe)
		}
	}

	return r0
}

// Database_SearchTribes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchTribes'
type Database_SearchTribes_Call struct {
	*mock.Call
}

// SearchTribes is a helper method to define mock.On call
//   - s string
func (_e *Database_Expecter) SearchTribes(s interface{}) *Database_SearchTribes_Call {
	return &Database_SearchTribes_Call{Call: _e.mock.On("SearchTribes", s)}
}

func (_c *Database_SearchTribes_Call) Run(run func(s string)) *Database_SearchTribes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_SearchTribes_Call) Return(_a0 []db.Tribe) *Database_SearchTribes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_SearchTribes_Call) RunAndReturn(run func(string) []db.Tribe) *Database_SearchTribes_Call {
	_c.Call.Return(run)
	return _c
}

// TotalBountiesPosted provides a mock function with given fields: r
func (_m *Database) TotalBountiesPosted(r db.PaymentDateRange) int64 {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for TotalBountiesPosted")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(db.PaymentDateRange) int64); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_TotalBountiesPosted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalBountiesPosted'
type Database_TotalBountiesPosted_Call struct {
	*mock.Call
}

// TotalBountiesPosted is a helper method to define mock.On call
//   - r db.PaymentDateRange
func (_e *Database_Expecter) TotalBountiesPosted(r interface{}) *Database_TotalBountiesPosted_Call {
	return &Database_TotalBountiesPosted_Call{Call: _e.mock.On("TotalBountiesPosted", r)}
}

func (_c *Database_TotalBountiesPosted_Call) Run(run func(r db.PaymentDateRange)) *Database_TotalBountiesPosted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.PaymentDateRange))
	})
	return _c
}

func (_c *Database_TotalBountiesPosted_Call) Return(_a0 int64) *Database_TotalBountiesPosted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_TotalBountiesPosted_Call) RunAndReturn(run func(db.PaymentDateRange) int64) *Database_TotalBountiesPosted_Call {
	_c.Call.Return(run)
	return _c
}

// TotalHuntersPaid provides a mock function with given fields: r
func (_m *Database) TotalHuntersPaid(r db.PaymentDateRange) int64 {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for TotalHuntersPaid")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(db.PaymentDateRange) int64); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_TotalHuntersPaid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalHuntersPaid'
type Database_TotalHuntersPaid_Call struct {
	*mock.Call
}

// TotalHuntersPaid is a helper method to define mock.On call
//   - r db.PaymentDateRange
func (_e *Database_Expecter) TotalHuntersPaid(r interface{}) *Database_TotalHuntersPaid_Call {
	return &Database_TotalHuntersPaid_Call{Call: _e.mock.On("TotalHuntersPaid", r)}
}

func (_c *Database_TotalHuntersPaid_Call) Run(run func(r db.PaymentDateRange)) *Database_TotalHuntersPaid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.PaymentDateRange))
	})
	return _c
}

func (_c *Database_TotalHuntersPaid_Call) Return(_a0 int64) *Database_TotalHuntersPaid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_TotalHuntersPaid_Call) RunAndReturn(run func(db.PaymentDateRange) int64) *Database_TotalHuntersPaid_Call {
	_c.Call.Return(run)
	return _c
}

// TotalPaidBounties provides a mock function with given fields: r
func (_m *Database) TotalPaidBounties(r db.PaymentDateRange) int64 {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for TotalPaidBounties")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(db.PaymentDateRange) int64); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_TotalPaidBounties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalPaidBounties'
type Database_TotalPaidBounties_Call struct {
	*mock.Call
}

// TotalPaidBounties is a helper method to define mock.On call
//   - r db.PaymentDateRange
func (_e *Database_Expecter) TotalPaidBounties(r interface{}) *Database_TotalPaidBounties_Call {
	return &Database_TotalPaidBounties_Call{Call: _e.mock.On("TotalPaidBounties", r)}
}

func (_c *Database_TotalPaidBounties_Call) Run(run func(r db.PaymentDateRange)) *Database_TotalPaidBounties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.PaymentDateRange))
	})
	return _c
}

func (_c *Database_TotalPaidBounties_Call) Return(_a0 int64) *Database_TotalPaidBounties_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_TotalPaidBounties_Call) RunAndReturn(run func(db.PaymentDateRange) int64) *Database_TotalPaidBounties_Call {
	_c.Call.Return(run)
	return _c
}

// TotalSatsPaid provides a mock function with given fields: r
func (_m *Database) TotalSatsPaid(r db.PaymentDateRange) uint {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for TotalSatsPaid")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func(db.PaymentDateRange) uint); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// Database_TotalSatsPaid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalSatsPaid'
type Database_TotalSatsPaid_Call struct {
	*mock.Call
}

// TotalSatsPaid is a helper method to define mock.On call
//   - r db.PaymentDateRange
func (_e *Database_Expecter) TotalSatsPaid(r interface{}) *Database_TotalSatsPaid_Call {
	return &Database_TotalSatsPaid_Call{Call: _e.mock.On("TotalSatsPaid", r)}
}

func (_c *Database_TotalSatsPaid_Call) Run(run func(r db.PaymentDateRange)) *Database_TotalSatsPaid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.PaymentDateRange))
	})
	return _c
}

func (_c *Database_TotalSatsPaid_Call) Return(_a0 uint) *Database_TotalSatsPaid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_TotalSatsPaid_Call) RunAndReturn(run func(db.PaymentDateRange) uint) *Database_TotalSatsPaid_Call {
	_c.Call.Return(run)
	return _c
}

// TotalSatsPosted provides a mock function with given fields: r
func (_m *Database) TotalSatsPosted(r db.PaymentDateRange) uint {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for TotalSatsPosted")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func(db.PaymentDateRange) uint); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// Database_TotalSatsPosted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalSatsPosted'
type Database_TotalSatsPosted_Call struct {
	*mock.Call
}

// TotalSatsPosted is a helper method to define mock.On call
//   - r db.PaymentDateRange
func (_e *Database_Expecter) TotalSatsPosted(r interface{}) *Database_TotalSatsPosted_Call {
	return &Database_TotalSatsPosted_Call{Call: _e.mock.On("TotalSatsPosted", r)}
}

func (_c *Database_TotalSatsPosted_Call) Run(run func(r db.PaymentDateRange)) *Database_TotalSatsPosted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.PaymentDateRange))
	})
	return _c
}

func (_c *Database_TotalSatsPosted_Call) Return(_a0 uint) *Database_TotalSatsPosted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_TotalSatsPosted_Call) RunAndReturn(run func(db.PaymentDateRange) uint) *Database_TotalSatsPosted_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBot provides a mock function with given fields: uuid, u
func (_m *Database) UpdateBot(uuid string, u map[string]interface{}) bool {
	ret := _m.Called(uuid, u)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBot")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) bool); ok {
		r0 = rf(uuid, u)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Database_UpdateBot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBot'
type Database_UpdateBot_Call struct {
	*mock.Call
}

// UpdateBot is a helper method to define mock.On call
//   - uuid string
//   - u map[string]interface{}
func (_e *Database_Expecter) UpdateBot(uuid interface{}, u interface{}) *Database_UpdateBot_Call {
	return &Database_UpdateBot_Call{Call: _e.mock.On("UpdateBot", uuid, u)}
}

func (_c *Database_UpdateBot_Call) Run(run func(uuid string, u map[string]interface{})) *Database_UpdateBot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *Database_UpdateBot_Call) Return(_a0 bool) *Database_UpdateBot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UpdateBot_Call) RunAndReturn(run func(string, map[string]interface{}) bool) *Database_UpdateBot_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBounty provides a mock function with given fields: b
func (_m *Database) UpdateBounty(b db.Bounty) (db.Bounty, error) {
	ret := _m.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBounty")
	}

	var r0 db.Bounty
	var r1 error
	if rf, ok := ret.Get(0).(func(db.Bounty) (db.Bounty, error)); ok {
		return rf(b)
	}
	if rf, ok := ret.Get(0).(func(db.Bounty) db.Bounty); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(db.Bounty)
	}

	if rf, ok := ret.Get(1).(func(db.Bounty) error); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_UpdateBounty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBounty'
type Database_UpdateBounty_Call struct {
	*mock.Call
}

// UpdateBounty is a helper method to define mock.On call
//   - b db.Bounty
func (_e *Database_Expecter) UpdateBounty(b interface{}) *Database_UpdateBounty_Call {
	return &Database_UpdateBounty_Call{Call: _e.mock.On("UpdateBounty", b)}
}

func (_c *Database_UpdateBounty_Call) Run(run func(b db.Bounty)) *Database_UpdateBounty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.Bounty))
	})
	return _c
}

func (_c *Database_UpdateBounty_Call) Return(_a0 db.Bounty, _a1 error) *Database_UpdateBounty_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_UpdateBounty_Call) RunAndReturn(run func(db.Bounty) (db.Bounty, error)) *Database_UpdateBounty_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBountyBoolColumn provides a mock function with given fields: b, column
func (_m *Database) UpdateBountyBoolColumn(b db.Bounty, column string) db.Bounty {
	ret := _m.Called(b, column)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBountyBoolColumn")
	}

	var r0 db.Bounty
	if rf, ok := ret.Get(0).(func(db.Bounty, string) db.Bounty); ok {
		r0 = rf(b, column)
	} else {
		r0 = ret.Get(0).(db.Bounty)
	}

	return r0
}

// Database_UpdateBountyBoolColumn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBountyBoolColumn'
type Database_UpdateBountyBoolColumn_Call struct {
	*mock.Call
}

// UpdateBountyBoolColumn is a helper method to define mock.On call
//   - b db.Bounty
//   - column string
func (_e *Database_Expecter) UpdateBountyBoolColumn(b interface{}, column interface{}) *Database_UpdateBountyBoolColumn_Call {
	return &Database_UpdateBountyBoolColumn_Call{Call: _e.mock.On("UpdateBountyBoolColumn", b, column)}
}

func (_c *Database_UpdateBountyBoolColumn_Call) Run(run func(b db.Bounty, column string)) *Database_UpdateBountyBoolColumn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.Bounty), args[1].(string))
	})
	return _c
}

func (_c *Database_UpdateBountyBoolColumn_Call) Return(_a0 db.Bounty) *Database_UpdateBountyBoolColumn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UpdateBountyBoolColumn_Call) RunAndReturn(run func(db.Bounty, string) db.Bounty) *Database_UpdateBountyBoolColumn_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBountyNullColumn provides a mock function with given fields: b, column
func (_m *Database) UpdateBountyNullColumn(b db.Bounty, column string) db.Bounty {
	ret := _m.Called(b, column)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBountyNullColumn")
	}

	var r0 db.Bounty
	if rf, ok := ret.Get(0).(func(db.Bounty, string) db.Bounty); ok {
		r0 = rf(b, column)
	} else {
		r0 = ret.Get(0).(db.Bounty)
	}

	return r0
}

// Database_UpdateBountyNullColumn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBountyNullColumn'
type Database_UpdateBountyNullColumn_Call struct {
	*mock.Call
}

// UpdateBountyNullColumn is a helper method to define mock.On call
//   - b db.Bounty
//   - column string
func (_e *Database_Expecter) UpdateBountyNullColumn(b interface{}, column interface{}) *Database_UpdateBountyNullColumn_Call {
	return &Database_UpdateBountyNullColumn_Call{Call: _e.mock.On("UpdateBountyNullColumn", b, column)}
}

func (_c *Database_UpdateBountyNullColumn_Call) Run(run func(b db.Bounty, column string)) *Database_UpdateBountyNullColumn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.Bounty), args[1].(string))
	})
	return _c
}

func (_c *Database_UpdateBountyNullColumn_Call) Return(_a0 db.Bounty) *Database_UpdateBountyNullColumn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UpdateBountyNullColumn_Call) RunAndReturn(run func(db.Bounty, string) db.Bounty) *Database_UpdateBountyNullColumn_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBountyPayment provides a mock function with given fields: b
func (_m *Database) UpdateBountyPayment(b db.Bounty) (db.Bounty, error) {
	ret := _m.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBountyPayment")
	}

	var r0 db.Bounty
	var r1 error
	if rf, ok := ret.Get(0).(func(db.Bounty) (db.Bounty, error)); ok {
		return rf(b)
	}
	if rf, ok := ret.Get(0).(func(db.Bounty) db.Bounty); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(db.Bounty)
	}

	if rf, ok := ret.Get(1).(func(db.Bounty) error); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_UpdateBountyPayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBountyPayment'
type Database_UpdateBountyPayment_Call struct {
	*mock.Call
}

// UpdateBountyPayment is a helper method to define mock.On call
//   - b db.Bounty
func (_e *Database_Expecter) UpdateBountyPayment(b interface{}) *Database_UpdateBountyPayment_Call {
	return &Database_UpdateBountyPayment_Call{Call: _e.mock.On("UpdateBountyPayment", b)}
}

func (_c *Database_UpdateBountyPayment_Call) Run(run func(b db.Bounty)) *Database_UpdateBountyPayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.Bounty))
	})
	return _c
}

func (_c *Database_UpdateBountyPayment_Call) Return(_a0 db.Bounty, _a1 error) *Database_UpdateBountyPayment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_UpdateBountyPayment_Call) RunAndReturn(run func(db.Bounty) (db.Bounty, error)) *Database_UpdateBountyPayment_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateChannel provides a mock function with given fields: id, u
func (_m *Database) UpdateChannel(id uint, u map[string]interface{}) bool {
	ret := _m.Called(id, u)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChannel")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint, map[string]interface{}) bool); ok {
		r0 = rf(id, u)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Database_UpdateChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateChannel'
type Database_UpdateChannel_Call struct {
	*mock.Call
}

// UpdateChannel is a helper method to define mock.On call
//   - id uint
//   - u map[string]interface{}
func (_e *Database_Expecter) UpdateChannel(id interface{}, u interface{}) *Database_UpdateChannel_Call {
	return &Database_UpdateChannel_Call{Call: _e.mock.On("UpdateChannel", id, u)}
}

func (_c *Database_UpdateChannel_Call) Run(run func(id uint, u map[string]interface{})) *Database_UpdateChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *Database_UpdateChannel_Call) Return(_a0 bool) *Database_UpdateChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UpdateChannel_Call) RunAndReturn(run func(uint, map[string]interface{}) bool) *Database_UpdateChannel_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGithubConfirmed provides a mock function with given fields: id, confirmed
func (_m *Database) UpdateGithubConfirmed(id uint, confirmed bool) {
	_m.Called(id, confirmed)
}

// Database_UpdateGithubConfirmed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGithubConfirmed'
type Database_UpdateGithubConfirmed_Call struct {
	*mock.Call
}

// UpdateGithubConfirmed is a helper method to define mock.On call
//   - id uint
//   - confirmed bool
func (_e *Database_Expecter) UpdateGithubConfirmed(id interface{}, confirmed interface{}) *Database_UpdateGithubConfirmed_Call {
	return &Database_UpdateGithubConfirmed_Call{Call: _e.mock.On("UpdateGithubConfirmed", id, confirmed)}
}

func (_c *Database_UpdateGithubConfirmed_Call) Run(run func(id uint, confirmed bool)) *Database_UpdateGithubConfirmed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(bool))
	})
	return _c
}

func (_c *Database_UpdateGithubConfirmed_Call) Return() *Database_UpdateGithubConfirmed_Call {
	_c.Call.Return()
	return _c
}

func (_c *Database_UpdateGithubConfirmed_Call) RunAndReturn(run func(uint, bool)) *Database_UpdateGithubConfirmed_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGithubIssues provides a mock function with given fields: id, issues
func (_m *Database) UpdateGithubIssues(id uint, issues map[string]interface{}) {
	_m.Called(id, issues)
}

// Database_UpdateGithubIssues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGithubIssues'
type Database_UpdateGithubIssues_Call struct {
	*mock.Call
}

// UpdateGithubIssues is a helper method to define mock.On call
//   - id uint
//   - issues map[string]interface{}
func (_e *Database_Expecter) UpdateGithubIssues(id interface{}, issues interface{}) *Database_UpdateGithubIssues_Call {
	return &Database_UpdateGithubIssues_Call{Call: _e.mock.On("UpdateGithubIssues", id, issues)}
}

func (_c *Database_UpdateGithubIssues_Call) Run(run func(id uint, issues map[string]interface{})) *Database_UpdateGithubIssues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *Database_UpdateGithubIssues_Call) Return() *Database_UpdateGithubIssues_Call {
	_c.Call.Return()
	return _c
}

func (_c *Database_UpdateGithubIssues_Call) RunAndReturn(run func(uint, map[string]interface{})) *Database_UpdateGithubIssues_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateInvoice provides a mock function with given fields: payment_request
func (_m *Database) UpdateInvoice(payment_request string) db.InvoiceList {
	ret := _m.Called(payment_request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInvoice")
	}

	var r0 db.InvoiceList
	if rf, ok := ret.Get(0).(func(string) db.InvoiceList); ok {
		r0 = rf(payment_request)
	} else {
		r0 = ret.Get(0).(db.InvoiceList)
	}

	return r0
}

// Database_UpdateInvoice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateInvoice'
type Database_UpdateInvoice_Call struct {
	*mock.Call
}

// UpdateInvoice is a helper method to define mock.On call
//   - payment_request string
func (_e *Database_Expecter) UpdateInvoice(payment_request interface{}) *Database_UpdateInvoice_Call {
	return &Database_UpdateInvoice_Call{Call: _e.mock.On("UpdateInvoice", payment_request)}
}

func (_c *Database_UpdateInvoice_Call) Run(run func(payment_request string)) *Database_UpdateInvoice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_UpdateInvoice_Call) Return(_a0 db.InvoiceList) *Database_UpdateInvoice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UpdateInvoice_Call) RunAndReturn(run func(string) db.InvoiceList) *Database_UpdateInvoice_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLeaderBoard provides a mock function with given fields: uuid, alias, u
func (_m *Database) UpdateLeaderBoard(uuid string, alias string, u map[string]interface{}) bool {
	ret := _m.Called(uuid, alias, u)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLeaderBoard")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, map[string]interface{}) bool); ok {
		r0 = rf(uuid, alias, u)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Database_UpdateLeaderBoard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLeaderBoard'
type Database_UpdateLeaderBoard_Call struct {
	*mock.Call
}

// UpdateLeaderBoard is a helper method to define mock.On call
//   - uuid string
//   - alias string
//   - u map[string]interface{}
func (_e *Database_Expecter) UpdateLeaderBoard(uuid interface{}, alias interface{}, u interface{}) *Database_UpdateLeaderBoard_Call {
	return &Database_UpdateLeaderBoard_Call{Call: _e.mock.On("UpdateLeaderBoard", uuid, alias, u)}
}

func (_c *Database_UpdateLeaderBoard_Call) Run(run func(uuid string, alias string, u map[string]interface{})) *Database_UpdateLeaderBoard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *Database_UpdateLeaderBoard_Call) Return(_a0 bool) *Database_UpdateLeaderBoard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UpdateLeaderBoard_Call) RunAndReturn(run func(string, string, map[string]interface{}) bool) *Database_UpdateLeaderBoard_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganizationBudget provides a mock function with given fields: budget
func (_m *Database) UpdateOrganizationBudget(budget db.BountyBudget) db.BountyBudget {
	ret := _m.Called(budget)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationBudget")
	}

	var r0 db.BountyBudget
	if rf, ok := ret.Get(0).(func(db.BountyBudget) db.BountyBudget); ok {
		r0 = rf(budget)
	} else {
		r0 = ret.Get(0).(db.BountyBudget)
	}

	return r0
}

// Database_UpdateOrganizationBudget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganizationBudget'
type Database_UpdateOrganizationBudget_Call struct {
	*mock.Call
}

// UpdateOrganizationBudget is a helper method to define mock.On call
//   - budget db.BountyBudget
func (_e *Database_Expecter) UpdateOrganizationBudget(budget interface{}) *Database_UpdateOrganizationBudget_Call {
	return &Database_UpdateOrganizationBudget_Call{Call: _e.mock.On("UpdateOrganizationBudget", budget)}
}

func (_c *Database_UpdateOrganizationBudget_Call) Run(run func(budget db.BountyBudget)) *Database_UpdateOrganizationBudget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.BountyBudget))
	})
	return _c
}

func (_c *Database_UpdateOrganizationBudget_Call) Return(_a0 db.BountyBudget) *Database_UpdateOrganizationBudget_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UpdateOrganizationBudget_Call) RunAndReturn(run func(db.BountyBudget) db.BountyBudget) *Database_UpdateOrganizationBudget_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTribe provides a mock function with given fields: uuid, u
func (_m *Database) UpdateTribe(uuid string, u map[string]interface{}) bool {
	ret := _m.Called(uuid, u)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTribe")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) bool); ok {
		r0 = rf(uuid, u)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Database_UpdateTribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTribe'
type Database_UpdateTribe_Call struct {
	*mock.Call
}

// UpdateTribe is a helper method to define mock.On call
//   - uuid string
//   - u map[string]interface{}
func (_e *Database_Expecter) UpdateTribe(uuid interface{}, u interface{}) *Database_UpdateTribe_Call {
	return &Database_UpdateTribe_Call{Call: _e.mock.On("UpdateTribe", uuid, u)}
}

func (_c *Database_UpdateTribe_Call) Run(run func(uuid string, u map[string]interface{})) *Database_UpdateTribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *Database_UpdateTribe_Call) Return(_a0 bool) *Database_UpdateTribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UpdateTribe_Call) RunAndReturn(run func(string, map[string]interface{}) bool) *Database_UpdateTribe_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTribeUniqueName provides a mock function with given fields: uuid, u
func (_m *Database) UpdateTribeUniqueName(uuid string, u string) {
	_m.Called(uuid, u)
}

// Database_UpdateTribeUniqueName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTribeUniqueName'
type Database_UpdateTribeUniqueName_Call struct {
	*mock.Call
}

// UpdateTribeUniqueName is a helper method to define mock.On call
//   - uuid string
//   - u string
func (_e *Database_Expecter) UpdateTribeUniqueName(uuid interface{}, u interface{}) *Database_UpdateTribeUniqueName_Call {
	return &Database_UpdateTribeUniqueName_Call{Call: _e.mock.On("UpdateTribeUniqueName", uuid, u)}
}

func (_c *Database_UpdateTribeUniqueName_Call) Run(run func(uuid string, u string)) *Database_UpdateTribeUniqueName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Database_UpdateTribeUniqueName_Call) Return() *Database_UpdateTribeUniqueName_Call {
	_c.Call.Return()
	return _c
}

func (_c *Database_UpdateTribeUniqueName_Call) RunAndReturn(run func(string, string)) *Database_UpdateTribeUniqueName_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTwitterConfirmed provides a mock function with given fields: id, confirmed
func (_m *Database) UpdateTwitterConfirmed(id uint, confirmed bool) {
	_m.Called(id, confirmed)
}

// Database_UpdateTwitterConfirmed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTwitterConfirmed'
type Database_UpdateTwitterConfirmed_Call struct {
	*mock.Call
}

// UpdateTwitterConfirmed is a helper method to define mock.On call
//   - id uint
//   - confirmed bool
func (_e *Database_Expecter) UpdateTwitterConfirmed(id interface{}, confirmed interface{}) *Database_UpdateTwitterConfirmed_Call {
	return &Database_UpdateTwitterConfirmed_Call{Call: _e.mock.On("UpdateTwitterConfirmed", id, confirmed)}
}

func (_c *Database_UpdateTwitterConfirmed_Call) Run(run func(id uint, confirmed bool)) *Database_UpdateTwitterConfirmed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(bool))
	})
	return _c
}

func (_c *Database_UpdateTwitterConfirmed_Call) Return() *Database_UpdateTwitterConfirmed_Call {
	_c.Call.Return()
	return _c
}

func (_c *Database_UpdateTwitterConfirmed_Call) RunAndReturn(run func(uint, bool)) *Database_UpdateTwitterConfirmed_Call {
	_c.Call.Return(run)
	return _c
}

// UserHasManageBountyRoles provides a mock function with given fields: pubKeyFromAuth, uuid
func (_m *Database) UserHasManageBountyRoles(pubKeyFromAuth string, uuid string) bool {
	ret := _m.Called(pubKeyFromAuth, uuid)

	if len(ret) == 0 {
		panic("no return value specified for UserHasManageBountyRoles")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(pubKeyFromAuth, uuid)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Database_UserHasManageBountyRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserHasManageBountyRoles'
type Database_UserHasManageBountyRoles_Call struct {
	*mock.Call
}

// UserHasManageBountyRoles is a helper method to define mock.On call
//   - pubKeyFromAuth string
//   - uuid string
func (_e *Database_Expecter) UserHasManageBountyRoles(pubKeyFromAuth interface{}, uuid interface{}) *Database_UserHasManageBountyRoles_Call {
	return &Database_UserHasManageBountyRoles_Call{Call: _e.mock.On("UserHasManageBountyRoles", pubKeyFromAuth, uuid)}
}

func (_c *Database_UserHasManageBountyRoles_Call) Run(run func(pubKeyFromAuth string, uuid string)) *Database_UserHasManageBountyRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Database_UserHasManageBountyRoles_Call) Return(_a0 bool) *Database_UserHasManageBountyRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UserHasManageBountyRoles_Call) RunAndReturn(run func(string, string) bool) *Database_UserHasManageBountyRoles_Call {
	_c.Call.Return(run)
	return _c
}

// WithdrawBudget provides a mock function with given fields: sender_pubkey, org_uuid, amount
func (_m *Database) WithdrawBudget(sender_pubkey string, org_uuid string, amount uint) {
	_m.Called(sender_pubkey, org_uuid, amount)
}

// Database_WithdrawBudget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithdrawBudget'
type Database_WithdrawBudget_Call struct {
	*mock.Call
}

// WithdrawBudget is a helper method to define mock.On call
//   - sender_pubkey string
//   - org_uuid string
//   - amount uint
func (_e *Database_Expecter) WithdrawBudget(sender_pubkey interface{}, org_uuid interface{}, amount interface{}) *Database_WithdrawBudget_Call {
	return &Database_WithdrawBudget_Call{Call: _e.mock.On("WithdrawBudget", sender_pubkey, org_uuid, amount)}
}

func (_c *Database_WithdrawBudget_Call) Run(run func(sender_pubkey string, org_uuid string, amount uint)) *Database_WithdrawBudget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(uint))
	})
	return _c
}

func (_c *Database_WithdrawBudget_Call) Return() *Database_WithdrawBudget_Call {
	_c.Call.Return()
	return _c
}

func (_c *Database_WithdrawBudget_Call) RunAndReturn(run func(string, string, uint)) *Database_WithdrawBudget_Call {
	_c.Call.Return(run)
	return _c
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
